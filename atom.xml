<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xxu</title>
  
  <subtitle>Xxuの个人博客</subtitle>
  <link href="https://jxblogs.com/atom.xml" rel="self"/>
  
  <link href="https://jxblogs.com/"/>
  <updated>2022-03-24T02:08:27.098Z</updated>
  <id>https://jxblogs.com/</id>
  
  <author>
    <name>Xxu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL漏洞-注入拓展&amp;Access数据库</title>
    <link href="https://jxblogs.com/posts/9a92240e.html"/>
    <id>https://jxblogs.com/posts/9a92240e.html</id>
    <published>2022-01-14T13:11:10.000Z</published>
    <updated>2022-03-24T02:08:27.098Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SQL漏洞-注入拓展-amp-Access数据库"><a href="#SQL漏洞-注入拓展-amp-Access数据库" class="headerlink" title="SQL漏洞-注入拓展&amp;Access数据库"></a>SQL漏洞-注入拓展&amp;Access数据库</h1><h3 id="加解密注入"><a href="#加解密注入" class="headerlink" title="加解密注入"></a>加解密注入</h3><h4 id="常见数据加密方式"><a href="#常见数据加密方式" class="headerlink" title="常见数据加密方式"></a>常见数据加密方式</h4><ul><li><p>1、MD5：不可逆算法，最常用的算法之一，70-80%的网站管理员密码都是采用md5，网上解密的方法是采用枚举的方法(0-9，a-z的随机组合)，32位</p></li><li><p>2、SHA：其中包括SHA1、SHA256、SHA384、SHA512，数字越大密文越长(0-9，a-z的随机组合)</p></li><li><p>3、ASCII：ASCII码</p></li><li><p>4、进制：计算机进制数</p></li><li><p>5、时间戳：计算机不会自己读取当前时间，而是采用对当前时间进行加密的时间戳供计算机来识别</p></li><li><p>6、URL：访问网站的地址信息  %20：[空格]  %23：#</p></li><li><p>7、BASE64：很多采用base64加密后的密文后面都是两个==，且=如果出现就必须在结尾出现</p></li><li><p>8、Unescape：%u+4位数字依次加密</p></li><li><p>9、AES：更高级更安全的加密方式，其中包含四个因素：填充、数据块、密码、偏移量，如果采用base64解密类似这种密文后是乱码，则很可能是采取Aes方式进行加密的，解密Aes方式的必须要知道密码和偏移量这两个前提</p></li><li><p>10、DES：和AES类似</p></li><li><p>11、带Salt：MD5+salt</p></li><li><p>12、自定义组合</p><h4 id="靶场演示"><a href="#靶场演示" class="headerlink" title="靶场演示"></a>靶场演示</h4><p>Less-21：使用admin-admin登录</p><p><img src="http://qiniu.jxblogs.com/image-20220114212704886.png"></p><p>可以看到这里读取的是cookie信息，抓个包试试 </p><p><img src="http://qiniu.jxblogs.com/image-20220114212939710.png">由于读取的是cookie信息，正常情况下需要在cookie处进行注入，不过此时可以看到uname是被加密过后的状态，猜测是base64加密，因为%3D在url编码中是=号的意思，那么uname就是YWRtaW4=，符合base64加密特征，也可以将鼠标放在加密的数据上进行查看，同样可以显示出YWRtaW4=</p></li></ul><p><img src="http://qiniu.jxblogs.com/image-20220114213348591.png"></p><p>​        选中右键将其发送到decoder解码器进行解码后得出</p><p><img src="http://qiniu.jxblogs.com/image-20220114213834809.png"></p><p>​        由于是使用加密方式进行读取数据，那么我们进行注入的时候同样也要将他的注入语句加密后再进行替换</p><p><img src="http://qiniu.jxblogs.com/image-20220114214138127.png"></p><p>​        注入后显示正常，注入成功</p><p><img src="http://qiniu.jxblogs.com/image-20220114214306179.png"></p><blockquote><p>在注入过程中碰到的加解密问题，首先要明确的就是加密方式，可以通过密文特征来辨别</p></blockquote><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>二次注入主要分两步：</p><ul><li><p>第一步：插入恶意数据</p><p>第一次进行数据库插入数据的时候，用户向数据库插入恶意语句，但是在写入数据库的时候还是保留原来的数据</p></li><li><p>第二步：引用恶意数据</p><p>在将数据存入到数据库之后，寻找另一处引用这个数据的操作，取出后直接给变量并带入数据库，这样就造成了SQL的二次注入</p></li></ul><blockquote><p>适用场景：已知某用户的用户名，在注册用户时，使用其用户名在末尾加上闭合方式并注释后进行注册，成为一个全新的用户，但是这个新用户在修改密码时，利用的sql语句的特性，提前将数据闭合，只保留前面的已知某用户的用户名，后面全部注释，那么此时就能对用户密码进行修改，完成对密码的盗取</p></blockquote><h4 id="靶场演示-1"><a href="#靶场演示-1" class="headerlink" title="靶场演示"></a>靶场演示</h4><p>Less-24：使用注册后的账户xxu-123456登录</p><p><img src="http://qiniu.jxblogs.com/image-20220114215941920.png"></p><p>这是原本的账户，我们需要注册一个二次账户来对这个用户进行密码盗取，通过观察源码可以发现sql语句如下：</p><pre class="line-numbers language-none"><code class="language-none">$sql = "UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' ";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>已知用户xxu，这时我们在不知晓密码的情况下，重新注册一个账户，插入恶意数据，观察sql语句可以发现，采用单引号闭合，所以我们注册账户为xxu’#，第一次登录并求改密码，由于sql语句特性，此时修改密码传入的语句为：</p><pre class="line-numbers language-none"><code class="language-none">$sql = "UPDATE users SET PASSWORD='$pass' where username='xxu'#' and password='$curr_pass' ";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么此时就会将xxu的密码修改，我们实际尝试看看，首先注册账户xxu’#</p><p><img src="http://qiniu.jxblogs.com/image-20220114222204852.png"></p><p>登录xxu’#并将密码修改为654321</p><p><img src="http://qiniu.jxblogs.com/image-20220114222324669.png"></p><p>重新查看数据库</p><p><img src="http://qiniu.jxblogs.com/image-20220114222417052.png"></p><p>发现被修改的账户不是xxu’#而是xxu，这也验证了之前的假设，利用sql语句的特性插入恶意数据并成功引用</p><blockquote><p>如果输入框有长度限制怎么办？<br>                1、前端限制：通过修改前端参数(F12修改maxlength)<br>                2、后端限制：没有办法</p></blockquote><h3 id="DNSlog注入"><a href="#DNSlog注入" class="headerlink" title="DNSlog注入"></a>DNSlog注入</h3><p><strong>原理：有时候注入发现并没有回显，也不能利用时间盲注，那么就可以利用带外通道(第三方平台)，也就是利用其他协议或者渠道，如http请求、DNS解析、SMB服务等将数据带出。DNSlog盲注可以减少发送的请求，直接回显数据实现注入</strong></p><blockquote><p>利用前提条件:</p><p>★mysql.ini中secure_file_priv必须为空<br>        ★secure_file_priv为null，不允许导入导出<br>        ★secure_file_priv为/tmp，导入导出只能在/tmp目录下<br>        ★secure_file_priv为空时，则不做限制允许导入导出</p></blockquote><pre class="line-numbers language-none"><code class="language-none">使用场景：当获取到一个网站的高权限以后，需要对数据库进行读写操作，由于网站的种种限制，发现无法对数据库进行读取和写入，这个时候就可以利用DNSlog注入，利用第三方平台将它回显出来。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="靶场演示-2"><a href="#靶场演示-2" class="headerlink" title="靶场演示"></a>靶场演示</h4><p>Less-5：布尔盲注靶场，假设无法使用盲注</p><p>利用第三方平台：<a href="http://ceye.io/">CEYE平台</a></p><p>配合DNSlog工具：<a href="https://github.com/ADOOO/DnslogSqlinj">DNSlog注入工具</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="-web渗透" scheme="https://jxblogs.com/categories/web%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="web渗透" scheme="https://jxblogs.com/tags/web%E6%B8%97%E9%80%8F/"/>
    
    <category term="SQL注入" scheme="https://jxblogs.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>SQL漏洞-增删改查&amp;报错盲注</title>
    <link href="https://jxblogs.com/posts/cc8a54a8.html"/>
    <id>https://jxblogs.com/posts/cc8a54a8.html</id>
    <published>2021-11-27T09:25:17.000Z</published>
    <updated>2021-11-27T16:06:25.352Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SQL漏洞-增删改查-amp-报错盲注"><a href="#SQL漏洞-增删改查-amp-报错盲注" class="headerlink" title="SQL漏洞-增删改查&amp;报错盲注"></a>SQL漏洞-增删改查&amp;报错盲注</h1><blockquote><p>前言：当进行SQL注入时，有很多注入会出现无回显的情况，其中不回显的原因可能是SQL语句查询方式的问题导致，这个时候我们需要用到相关的报错或盲注进行后续操作，同时作为手工注入时，提前了解或预知其SQL语句大概写法也能更好的选择对应的注入语句。</p></blockquote><p>​    </p><h3 id="数据库查询方式"><a href="#数据库查询方式" class="headerlink" title="数据库查询方式"></a>数据库查询方式</h3><p>select 查询数据:在网站应用中进行数据显示查询操作</p><pre class="line-numbers language-none"><code class="language-none">例：select * from news where id=$id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>insert 插入数据:在网站应用中进行用户注册添加等操作</p><pre class="line-numbers language-none"><code class="language-none">例：insert into news(id,url,text) values(2,'x','$t')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>delete 删除数据:后台管理里面删除文章删除用户等操作</p><pre class="line-numbers language-none"><code class="language-none">例：delete from news where id=$id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>update 更新数据:会员或后台中心数据同步或缓存等操作</p><pre class="line-numbers language-none"><code class="language-none">例：update user set pwd='$p' where id=2 and username='admin'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>重点理解</strong>：我们可以通过以上查询方式与网站应用的关系注入点产生地方或应用猜测到对方的SQL查询方式 ,例如当你在测试一个带有注册功能的网站时，就可以通过抓包找到提交数据的地方，这时候是看不到insert语句的，而我们根据注册的这种行为方式，就可以判断这是一个插入语句，并且在提交数据的地方进行相应的注入。</p><h2 id="报错盲注"><a href="#报错盲注" class="headerlink" title="报错盲注"></a>报错盲注</h2><p>盲注就是在注入过程中，获取的数据不能回显至前端页面。此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注。我们可以知道盲注分为以下三类：</p><ul><li>1、基于报错的SQL盲注-报错回显floor，updatexml，extractvalue</li></ul><blockquote><p>原理：采用sql语句的特性使之报错回显在页面上</p></blockquote><ul><li>2、基于布尔的SQL盲注-逻辑判断regexp,like,ascii,left,ord,mid</li></ul><blockquote><p>原理：通过sql语句逻辑判断信息内容</p></blockquote><ul><li>3、基于时间的SQL盲注-延时判断if,sleep select if(database()=’pikachu’,123,456);</li></ul><blockquote><p>原理：通过响应页面时长判断信息内容</p></blockquote><p>总的来说，通过报错盲注，可以将我们想要的信息回显到页面上，例如数据库用户等信息</p><p>参考信息：<a href="https://www.jianshu.com/p/bc35f8dd4f7c">12种报错注入+万能语句</a></p><h3 id="靶场演示"><a href="#靶场演示" class="headerlink" title="靶场演示"></a>靶场演示</h3><p>靶场：pikachu</p><h4 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h4><p> <img src="http://qiniu.jxblogs.com/image-20211127175808113.png"></p><p>可以看出，这是一个注册页面，对应语句应该是insert，我们抓个包看看</p><p> <img src="http://qiniu.jxblogs.com/image-20211127175918163.png"></p><p>观察到这是一个用POST提交的数据，底下对应着我们刚刚填入的信息，此时我们可以在这里进行sql注入，由于我们不了解语句的闭合方式，我们查看一下页面源代码，得到语句如下：</p><pre class="line-numbers language-none"><code class="language-none">$query="insert into member(username,pw,sex,phonenum,email,address) values('{$getdata['username']}',md5('{$getdata['password']}'),'{$getdata['sex']}','{$getdata['phonenum']}','{$getdata['email']}','{$getdata['add']}')";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>闭合方式为单引号，但是有一个问题，我们如果在前面进行了语句的闭合，把后面的语句进行了–+注释，那么我们就无法将这个insert语句正确的运行，会影响到后面一整串参数的传递</p><pre class="line-numbers language-none"><code class="language-none">values('xxu' order by 3--+',md5('xxu'),'111','111','111','111')";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就像这样，因为没有把每个指定的列名插入指定的参数，后面就会产生一个错误，造成插入失败</p><p> <img src="http://qiniu.jxblogs.com/image-20211127181746484.png"></p><p><img src="http://qiniu.jxblogs.com/image-20211127213339787.png"></p><p>此时尝试在传的最后一个参数后面注入</p><p> <img src="http://qiniu.jxblogs.com/image-20211127214311750.png"></p><p>结果还是报错，猜测是影响到了后面的submit提交所以报错，但如果在submit以后再注入语句就不会被运行了</p><p><img src="http://qiniu.jxblogs.com/image-20211127214349180.png"></p><p>所以当出现这种页面无法返回报错信息，注入语句无法传入的情况，我们就可以用到报错盲注，利用数据库的特性进行强制报错</p><p>将原先的提交语句替换成我们的payload:</p><pre class="line-numbers language-none"><code class="language-none">username=xxu' or(select 1 from(select count(*),concat((select (select (select concat(0x7e,database(),0x7e))) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a) or '&amp;password=xxu&amp;sex=111&amp;phonenum=111&amp;email=111&amp;add=111&amp;submit=submit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://qiniu.jxblogs.com/image-20211127183047682.png"></p><p>结果成功显示数据库名称pikachu</p><p> <img src="http://qiniu.jxblogs.com/image-20211127214644226.png"></p><p>我们可以修改0x7e后面的数据来收集我们想要的结果，接下来用另外两种载荷分别尝试：</p><pre class="line-numbers language-none"><code class="language-none">username=xxu' or updatexml(1,concat(0x7e,(version())),0) or '&amp;password=xxu&amp;sex=%E7%94%B7&amp;phonenum=111&amp;email=111&amp;add=111&amp;submit=submit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <img src="http://qiniu.jxblogs.com/image-20211127215427141.png"></p><pre class="line-numbers language-none"><code class="language-none">username=xxu' or extractvalue(1,concat(0x7e,database())) or '&amp;password=xxu&amp;sex=%E7%94%B7&amp;phonenum=111&amp;email=111&amp;add=111&amp;submit=submit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <img src="http://qiniu.jxblogs.com/image-20211127215533612.png"></p><blockquote><p>以上三种payload语法都是insert语句专属语法</p></blockquote><h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4><p>登录成功以后，修改个人信息</p><p> <img src="http://qiniu.jxblogs.com/image-20211127220048091.png"></p><p>个人信息是在原有的基础上进行修改，所以是update语句操作</p><p> <img src="http://qiniu.jxblogs.com/image-20211127220224219.png"></p><p>点击修改，开启抓包</p><p> <img src="http://qiniu.jxblogs.com/image-20211127220313318.png"></p><p>同样的，在这里我们也可以利用update的攻击载荷进行注入：</p><pre class="line-numbers language-none"><code class="language-none">sex=%E7%94%B7&amp;phonenum=111&amp;add=xxu' or (select 1 from(select count(*),concat( floor(rand(0)*2),0x7e,(database()),0x7e)x from information_schema.character_sets group by x)a) or '&amp;email=111&amp;submit=submit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="http://qiniu.jxblogs.com/image-20211127220740869.png"></p><pre class="line-numbers language-none"><code class="language-none">sex=%E7%94%B7&amp;phonenum=111&amp;add=xxu' or  updatexml(1,concat(0x7e,(version())),0) or '&amp;email=111&amp;submit=submit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="http://qiniu.jxblogs.com/image-20211127220813789.png"></p><pre class="line-numbers language-none"><code class="language-none">sex=%E7%94%B7&amp;phonenum=111&amp;add=xxu' or extractvalue(1,concat(0x7e,@@version_compile_os)) or '&amp;email=111&amp;submit=submit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="http://qiniu.jxblogs.com/image-20211127220922399.png"></p><h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><p> <img src="http://qiniu.jxblogs.com/image-20211127221257842.png"></p><p>点击删除后抓包尝试</p><p> <img src="http://qiniu.jxblogs.com/image-20211127221604536.png"></p><p>发现不一样的地方在于删除时用了GET的提交方式，后面的是路径，那么如果要指定删除某条留言，那么后面提交的参数56就是删除的关键了，delete攻击载荷：</p><pre class="line-numbers language-none"><code class="language-none">/pikachu/vul/sqli/sqli_del.php?id=56+or+(select+1+from(select+count(*),concat(floor(rand(0)*2),0x7e,(database()),0x7e)x+from+information_schema.character_sets+group+by+x)a)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 将要提交的参数56替换为我们的攻击载荷(载荷中的数字根据具体抓包数据来修改)</p><p><img src="http://qiniu.jxblogs.com/image-20211127222645384.png"></p><p>这里的+号意思为拼接，因为在数据包里，GET加上一个空格是路径，路径再加上一个空格是HTTP/1.1也就是版本号，如果我们在这里就用空格的话，页面会将56后面的or误判为版本号，所以这里用+号来表示拼接</p><p> <img src="http://qiniu.jxblogs.com/image-20211127222706400.png"></p><p>结果成功输出</p><pre class="line-numbers language-none"><code class="language-none">pikachu/vul/sqli/sqli_del.php?id=56+or+updatexml+(1,concat(0x7e,database()),0)/pikachu/vul/sqli/sqli_del.php?id=56+or+extractvalue(1,concat(0x7e,database()))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h4><p>我们已经知道sql注入中select第一步为猜解列名数量，第二步进行联合查询，第三步将信息回显在页面上，但是有些会回显在页面上，有些不会，碰到不会回显的这种情况，我们就可以用到布尔盲注来猜测数据。</p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><blockquote><p>布尔盲注：在我们输入and 1或者and 0，页面只返回True和False两种类型页面。利用页面返回不同，逐个猜解数据。</p></blockquote><p>靶场：sqlilabs-less5</p><p> <img src="http://qiniu.jxblogs.com/image-20211127224148969.png"></p><p>进入靶场，首先常规手段猜测列名</p><p> <img src="http://qiniu.jxblogs.com/image-20211127224235780.png"></p><p>成功猜测出列名为3，进行联合查询</p><p> <img src="http://qiniu.jxblogs.com/image-20211127224315735.png"></p><p>此时遗憾发现没有数据显示在页面上，这时页面要么报错，要么空，要么正常显示，而不会回显数据，那么我们只能使用布尔盲注进行逻辑判断，看页面是否显示正常，以此方式来一步步推测数据</p><p>布尔盲注可能用到的函数：</p><ul><li>like ‘ro%’                            #判断ro或ro…是否成立</li><li>regexp ‘^xxu…’                 #匹配xxu及xxu…等</li><li>if(条件,5,0)                         #条件成立 返回5 反之 返回0</li><li>sleep(5)                             #SQL语句延时执行5秒</li><li>mid(a,b,c)                         #从位置b(第一位从1开始算)开始，截取a字符串的c位</li><li>substr(a,b,c)                     #从b位置开始，截取字符串a的c个字符</li><li>left(database(),1)             #left(a,b)从左侧截取a的前b位</li><li>length(database())=8      #判断数据库database()名的长度</li><li>ord=ascii ascii(x)=97       #判断x的ascii码是否大于小于等于97</li></ul><p>首先我们尝试判断数据库名的长度：</p><p><img src="http://qiniu.jxblogs.com/image-20211127225612601.png"></p><p>猜测数据库名长度为9，页面显示为空，说明长度不为9.我们试试7</p><p> <img src="http://qiniu.jxblogs.com/image-20211127225720545.png"></p><p>我们知道数据库名称为security，是8位，所以此时我们猜测8位</p><p> <img src="http://qiniu.jxblogs.com/image-20211127225804905.png"></p><p>页面正常显示，说明猜测正确</p><p>此时我们再试试猜测数据库名称的第一个字符，使用left(database(),1)=’a’,意思为从左边开始数的第一位数字为a</p><p> <img src="http://qiniu.jxblogs.com/image-20211127230049442.png"></p><p>显示为空，再试试left(database(),1)=’b’</p><p> <img src="http://qiniu.jxblogs.com/image-20211127230204675.png"></p><p>还是显示为空，我们一直测试直到left(database(),1)=’s’</p><p> <img src="http://qiniu.jxblogs.com/image-20211127230245918.png"></p><p>此时数据真正成功回显到了页面上，说明布尔盲注真实可行</p><blockquote><p>总结：增删改对应报错盲注   查对应布尔盲注，不过布尔盲注的缺点很明显，就是比较花费时间，配合脚本实现自动化查询才是布尔盲注的正确使用姿势。</p></blockquote><h2 id="延时盲注"><a href="#延时盲注" class="headerlink" title="延时盲注"></a>延时盲注</h2><p>延时注入适用于，无法回显和无法显示错误页面的场景，也就是只要写入sql语句就啥也回显不出来的那种场景，和布尔盲注相似，但是比布尔盲注还要耗时。</p><p>我们利用if和sleep的机制来进行判断，首先我们进入security数据库</p><p> <img src="http://qiniu.jxblogs.com/image-20211127232008846.png"></p><p>使用select if的语句，这句话的意思是如果数据库名称为pikachu那么就显示123，如果不是，就显示456，此时数据库不是pikachu，所以返回456，我们再切换到pikachu试试</p><p> <img src="http://qiniu.jxblogs.com/image-20211127232157790.png"></p><p>此时返回的是123，说明语句生效，0.00 sec代表的是查询时间为0秒，利用这个机制，我们可以把sleep和if结合在一起，此时注入语句为：</p><pre class="line-numbers language-none"><code class="language-none">?id=1' and sleep(if(database()='aaa',5,0))--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语句的意思为如果数据库名称是aaa，页面就加载5秒，如果不是就加载0秒，此时我们尝试注入：</p><p> <img src="http://qiniu.jxblogs.com/image-20211127233137239.png"></p><p>页面很快就反应过来了，因为数据库名称不是aaa，所以加载0秒，此时我们换成：</p><pre class="line-numbers language-none"><code class="language-none">?id=1' and sleep(if(database()='security',5,0))--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://qiniu.jxblogs.com/image-20211127233309430.png"></p><p>发现页面加载了5s左右才加载完成，说明延时注入猜测成功，再次尝试获取数据库名称第一位</p><pre class="line-numbers language-none"><code class="language-none">?id=1' and if(left(database(),1)='s',sleep(5),sleep(0))--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://qiniu.jxblogs.com/image-20211127233838705.png"></p><p>第一个数为s，所以页面加载5s，延时注入成功</p><p>有些网站会对单引号进行过滤，此时可以用ASCII码表达式注入</p><pre class="line-numbers language-none"><code class="language-none">?id=1' and if(ascii(left(database(),1))=115,sleep(5),sleep(0))--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以记住在ascii码表中0=48 a=97 A=65，剩下的拿去加就知道了，s对应的就是115</p><p><img src="http://qiniu.jxblogs.com/image-20211127235212953.png"></p><p>参考博客：<a href="https://www.jianshu.com/p/bc35f8dd4f7c">https://www.jianshu.com/p/bc35f8dd4f7c</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="-web渗透" scheme="https://jxblogs.com/categories/web%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="web渗透" scheme="https://jxblogs.com/tags/web%E6%B8%97%E9%80%8F/"/>
    
    <category term="SQL注入" scheme="https://jxblogs.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>SQL漏洞-高低权限注入&amp;敏感文件读写</title>
    <link href="https://jxblogs.com/posts/83a1acb4.html"/>
    <id>https://jxblogs.com/posts/83a1acb4.html</id>
    <published>2021-11-26T04:39:17.000Z</published>
    <updated>2021-11-26T04:44:26.560Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SQL漏洞-高低权限注入-amp-敏感文件读写"><a href="#SQL漏洞-高低权限注入-amp-敏感文件读写" class="headerlink" title="SQL漏洞-高低权限注入&amp;敏感文件读写"></a>SQL漏洞-高低权限注入&amp;敏感文件读写</h1><blockquote><p>sql注入漏洞的危害：拖库</p></blockquote><h2 id="高权限注入及低权限注入"><a href="#高权限注入及低权限注入" class="headerlink" title="高权限注入及低权限注入"></a>高权限注入及低权限注入</h2><table><thead><tr><th align="center">网站</th><th align="center">管理员</th><th align="center">数据库</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">A</td><td align="center">A</td></tr><tr><td align="center">B</td><td align="center">B</td><td align="center">B</td></tr></tbody></table><p>网站A与B在同一台服务器下，分别由不同的管理员管理并且拥有自己独立的数据库，互不影响互不干扰。但是如果网站A被拿到管理员账户，基于mysql5.0以上环境，可以对网站B 进行一个跨库查询从而获取到B的敏感信息。而低权限只限于本库查询，无法进行跨库查询</p><blockquote><p>跨库查询思路  前提：1、拥有高权限 2、在同一台服务器下 3、数据库5.0以上版本</p></blockquote><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><p>网站A：sqlilab靶场，已经获取到root用户，拥有最高权限</p><p> <img src="http://qiniu.jxblogs.com/image-20211126095551670.png"></p><p>网站B：大米CMS，与网站A在同一服务器下，自主搭建，无WAF<img src="http://qiniu.jxblogs.com/image-20211126104905624.png"></p><h4 id="1、获取B网站数据库"><a href="#1、获取B网站数据库" class="headerlink" title="1、获取B网站数据库"></a>1、获取B网站数据库</h4><p>在information_schema底下有一张表叫做schemata，里面包含了所有数据库的信息，其中列schema_name，包含了所有数据库的名称，跨网站第一步，需要获取的就是该网站的数据库名称，注入表达式：</p><pre class="line-numbers language-none"><code class="language-none">union select 1,group_concat(schema_name),3 from information_schema.schemata--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://qiniu.jxblogs.com/image-20211126105232387.png"></p><p>成功获取到数据库名称：damidb</p><h4 id="2、获取数据库关键表"><a href="#2、获取数据库关键表" class="headerlink" title="2、获取数据库关键表"></a>2、获取数据库关键表</h4><p>需要从记录所有表名的一张表information_schema.tables里的列table_name来查找当前表名，不过需要指定数据库为damidb，注入表达式</p><pre class="line-numbers language-none"><code class="language-none">union select 1,group_concat(table_name),3 from information_schema.tables where table_schema='damidb'--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://qiniu.jxblogs.com/image-20211126110030083.png"></p><p>不出意外，关键信息就在dami_admin这张表里</p><h4 id="3、获取指定数据库指定表下的列名信息"><a href="#3、获取指定数据库指定表下的列名信息" class="headerlink" title="3、获取指定数据库指定表下的列名信息"></a>3、获取指定数据库指定表下的列名信息</h4><p>需要获取信息，将table_name该为column_name，information_schema.tables改为information_schema.columns</p><pre class="line-numbers language-none"><code class="language-none">union select 1,group_concat(column_name),3 from information_schema.columns where table_schema='damidb'--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://qiniu.jxblogs.com/image-20211126110522377.png"></p><p>观察列名信息，发现获取的列名是当前数据库下所有表的列名信息，所以还需要指定表dami_admin</p><pre class="line-numbers language-none"><code class="language-none">union select 1,group_concat(column_name),3 from information_schema.columns where table_schema='damidb' and table_name='dami_admin'--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://qiniu.jxblogs.com/image-20211126110702078.png"></p><p>此时成功回显当前表名数据，可以看出username和password才是我们需要的东西</p><h4 id="4、根据列名信息查找关键数据"><a href="#4、根据列名信息查找关键数据" class="headerlink" title="4、根据列名信息查找关键数据"></a>4、根据列名信息查找关键数据</h4><p>将2，3替换为username和password同时指定数据库名和表名进行精准查找</p><pre class="line-numbers language-none"><code class="language-none">union select 1,username,password from damidb.dami_admin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="http://qiniu.jxblogs.com/image-20211126111053622.png"></p><p>成功获取到admin账户密码</p><h2 id="文件读写操作"><a href="#文件读写操作" class="headerlink" title="文件读写操作"></a>文件读写操作</h2><p>在Mysql中有两条特有的文件操作函数：</p><pre class="line-numbers language-none"><code class="language-none">1、load_file()   --- 读取函数2、into outfile 或 into dumpfile --- 导出函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>前提条件：在mysql.ini配置文件添加参数secure_file_priv = [空]</p></blockquote><p>例如，我们在服务器C盘底下创建一个1.txt</p><p> <img src="http://qiniu.jxblogs.com/image-20211126112253985.png"></p><p>此时在网页使用文件读写函数注入，查看结果</p><pre class="line-numbers language-none"><code class="language-none">union select 1,load_file('C://1.txt'),3--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="http://qiniu.jxblogs.com/image-20211126112943614.png"></p><p>成功读取本地文件，接下来尝试往C盘中写入文件</p><pre class="line-numbers language-none"><code class="language-none">union select 1,'Xxu',3 into outfile'C://2.txt'--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="http://qiniu.jxblogs.com/image-20211126113409348.png"></p><p>没有显示代表写入成功，看看C盘下有没有多出2.txt文件</p><p> <img src="http://qiniu.jxblogs.com/image-20211126113458899.png"></p><p>发现文件成功写入，并且1，2，3都被写入了，那如果我们不想要1和3，只写入2呢</p><pre class="line-numbers language-none"><code class="language-none">union select 'Xxu' into outfile'C://3.txt'--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="http://qiniu.jxblogs.com/image-20211126113724952.png"></p><p>这里报错了，说明写入时也必须按列数来写入，这些是不可或缺的</p><blockquote><p>这里需要注意的点是：</p><p>load_file(‘C://1.txt’)后面的路径得加括号，并且是通过替换2和3来回显数据的</p><p>into outfile’C://3.txt’后面的路径只需要加单引号，但是是跟在123的后面，将123的数据</p><p>替换为想要写入的内容来写入的，写入数据时需要加单引号</p></blockquote><h3 id="路径获取常见方法"><a href="#路径获取常见方法" class="headerlink" title="路径获取常见方法"></a>路径获取常见方法</h3><ul><li>报错显示：有一些网站在维护的时候会报错，会出现一些路径信息</li><li>遗留文件：php会在默认网站目录下留下phpinfo.php，里面有很多信息</li><li>漏洞报错：特定的CMS有特定的配置文件，位置一般是不会变的，例如phpcms暴路径漏洞</li><li>平台配置文件：例如apache搭建的网站在conf文件夹下有httpd.conf文件</li><li>爆破：暴力手段类似子域名挖掘机，sqlmap等扫描工具可以扫描后台路径</li><li>常见的load_file()读取的敏感信息：<a href="https://blog.csdn.net/weixin_30292843/article/details/99381669">点我进入查看</a></li></ul><h2 id="常见文件操作问题-魔术引号"><a href="#常见文件操作问题-魔术引号" class="headerlink" title="常见文件操作问题:魔术引号"></a>常见文件操作问题:魔术引号</h2><p>魔术引号开关在php.ini配置文件中有magic_quotes_gpc，在php5.4.0以下版本是默认开着的它是php内置的一个安全机制，当打开时，会对所有的 ‘（单引号），”（双引号），\（反斜线）和 NULL 字符自动加上一个反斜线进行转义  </p><h3 id="1、表现特征"><a href="#1、表现特征" class="headerlink" title="1、表现特征"></a>1、表现特征</h3><p><img src="http://qiniu.jxblogs.com/image-20211126115942340.png"></p><p>可以看到，在开启了魔术引号后，所有的路径符号都加上了一个反斜杠，这一点可以看出此刻网站用的是php5.4.0以下的版本</p><h3 id="2、绕过方式"><a href="#2、绕过方式" class="headerlink" title="2、绕过方式"></a>2、绕过方式</h3><h4 id="1-编码绕过"><a href="#1-编码绕过" class="headerlink" title="1.编码绕过"></a>1.编码绕过</h4><p>将路径信息转换为十六进制用以绕过魔术引号，而十六进制能被url正确解码</p><p> <img src="http://qiniu.jxblogs.com/image-20211126121512434.png"></p><pre class="line-numbers language-none"><code class="language-none">此刻需要读取的路径：C://1.txt十六进制转码后：0x433A2F2F312E747874注入表达式：union select 1,load_file(0x433A2F2F312E747874),3--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>由于已经进行了编码，所以不需要再加单引号了</p><p> <img src="http://qiniu.jxblogs.com/image-20211126121714255.png"></p><p>结果：成功绕过</p><h4 id="2-宽字节绕过"><a href="#2-宽字节绕过" class="headerlink" title="2.宽字节绕过"></a>2.宽字节绕过</h4><p> 演示：<a href="http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1">线上靶场</a><img src="http://qiniu.jxblogs.com/image-20211126122016506.png"></p><p>此时已经用单引号进行闭合，不过还是被魔术引号加了反斜杠转义，使得后面语句无法执行</p><p><strong>宽字节绕过原理：</strong></p><ul><li><strong><em>\</em>比如使用%df’:会被PHP当中的addslashes函数转义为“ %df’ ”。**</strong></li><li><strong>“ \ ”即url里面的“ %5c ”, “ ’ ”对应的url编码是“%27”，那么也就是说，“ %df’ ”会被转义“ %df%5c%27 ”</strong></li><li><strong>倘若网站的字符集是GBK，mysql使用的编码也是GBK的话，就会认为“ %df%5c%27 ”是一个宽字节。</strong></li><li><strong>“ %df%5c ”会结合(因为宽字节是占两个字节)，也就是“縗” 。后面就有一个“ ’ ”。就造成了一个攻击效果。**</strong></li></ul><p>此时我们将id=1’变为id=1%df’，注入表达式,查看结果</p><pre class="line-numbers language-none"><code class="language-none">id=1%df' order by 2--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://qiniu.jxblogs.com/image-20211126123041762.png"></p><p>发现此时的1后面的%df加了反斜杠被转义后变成了%df%5c，加上后面单引号变为了%27，所以整个1%df’在页面上变为了’1綅’完成了一个闭合，在mysql中1后面的则是一个宽字节，通过这样的方式完成了魔术引号的绕过</p><p>参考博客：<a href="https://blog.csdn.net/weixin_30292843/article/details/99381669">https://blog.csdn.net/weixin_30292843/article/details/99381669</a></p><p>​                   <a href="https://blog.csdn.net/qq_46091464/article/details/105893529">https://blog.csdn.net/qq_46091464/article/details/105893529</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="-web渗透" scheme="https://jxblogs.com/categories/web%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="web渗透" scheme="https://jxblogs.com/tags/web%E6%B8%97%E9%80%8F/"/>
    
    <category term="SQL注入" scheme="https://jxblogs.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>SQL漏洞-类型&amp;请求方法注入</title>
    <link href="https://jxblogs.com/posts/fd334196.html"/>
    <id>https://jxblogs.com/posts/fd334196.html</id>
    <published>2021-11-25T17:05:17.000Z</published>
    <updated>2021-11-27T15:58:14.946Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SQL漏洞-类型-amp-请求方法注入"><a href="#SQL漏洞-类型-amp-请求方法注入" class="headerlink" title="SQL漏洞-类型&amp;请求方法注入"></a>SQL漏洞-类型&amp;请求方法注入</h1><blockquote><p>sql注入漏洞的危害：拖库</p></blockquote><h3 id="提交参数类型"><a href="#提交参数类型" class="headerlink" title="提交参数类型"></a>提交参数类型</h3><h4 id="1、数字类型"><a href="#1、数字类型" class="headerlink" title="1、数字类型"></a>1、数字类型</h4><p>select * from user where id=1</p><h4 id="2、字符类型"><a href="#2、字符类型" class="headerlink" title="2、字符类型"></a>2、字符类型</h4><p>select * from user where name=’xiaoming’ </p><p>当进行数据提交时，如果提交类型是字符型，则必须加单引号或双引号来进行一个闭合</p><p>而数字型可加可不加</p><h4 id="3、搜索类型"><a href="#3、搜索类型" class="headerlink" title="3、搜索类型"></a>3、搜索类型</h4><p>select * from user where name like ‘%xiaoming%’ </p><p>有时候一张表中数据很多，需要精准查找，可以使用%加引号闭合搜索，只要有xiaoming的信息都会被搜索出来</p><h4 id="4、JSON类型"><a href="#4、JSON类型" class="headerlink" title="4、JSON类型"></a>4、JSON类型</h4><p>json是post提交方式中的一种数据交互格式</p><pre class="line-numbers language-none"><code class="language-none">JSON格式：      json={"name":"xiaoming"  "age":"18"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="SQL语句干扰符号"><a href="#SQL语句干扰符号" class="headerlink" title="SQL语句干扰符号"></a>SQL语句干扰符号</h3><p>许多网站为了防止sql注入，在网页代码中加入了干扰sql语句的干扰符号。</p><p>使得sql语句被判定为某个提交参数而不会被执行，这些干扰符号包括</p><ul><li><p>1.’(单引号)</p></li><li><p>2.”(双引号)</p></li><li><p>3.%(百分号)</p></li><li><p>4.)(小括号)</p></li><li><p>5.}(大括号)<br></p></li></ul><p>等等，具体干扰方式还需要看写法</p><h3 id="靶场演示"><a href="#靶场演示" class="headerlink" title="靶场演示"></a>靶场演示</h3><p>环境：参数字符型注入测试   sqlilabs Less-1,2,3,4</p><h4 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h4><p><img src="http://qiniu.jxblogs.com/image-20211125221608634.png"></p><p>常规手段先用and 1=2查看页面结果</p><p><img src="http://qiniu.jxblogs.com/image-20211125222038036.png"></p><p>发现页面不影响，说明后台进行了拦截或者过滤，此时我们通过查看网页源代码发现，查询语句为</p><pre class="line-numbers language-none"><code class="language-none">$sql="SELECT * FROM users WHERE id='$id' LIMIT 0,1";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们将注入语句1 and 1=2带入到源码中，可得</p><pre class="line-numbers language-none"><code class="language-none">$sql="SELECT * FROM users WHERE id='1 and 1=2' LIMIT 0,1";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现此时的注入语句被当作字符类型的提交参数提交上去了，1 and 1=2只是一个参数</p><p>不会被运行，所以绕过则需要加上单引号’进行闭合，此时注入语句为1’ and 1=2</p><p>由于后面还有单引号’和LIMIT 0,1会影响到结果的输出，所以在语句末加上–+或者#将其注释，带入源码：</p><pre class="line-numbers language-none"><code class="language-none">$sql="SELECT * FROM users WHERE id='1' and 1=2--+' LIMIT 0,1";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://qiniu.jxblogs.com/image-20211125223503821.png"></p><p>闭合后，页面回显错误说明可能存在注入点，接下来就可以联合查询获取数据了</p><h4 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h4><p><img src="http://qiniu.jxblogs.com/image-20211125223917915.png"></p><p>可以看到，第三关同样进行了过滤，页面不影响，看看他的源码是怎么过滤的</p><pre class="line-numbers language-none"><code class="language-none">$sql="SELECT * FROM users WHERE id=('$id') LIMIT 0,1";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过观察语句发现，外面加了一个小括号，所以要让前面闭合，则语句变为 1’) and 1=2–+，带入源码：</p><pre class="line-numbers language-none"><code class="language-none">$sql="SELECT * FROM users WHERE id=('1') and 1=2--+') LIMIT 0,1";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://qiniu.jxblogs.com/image-20211125224523546.png"></p><p>结果成功绕过过滤</p><h4 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h4><p>用第三关的语句注入第四关，发现没了效果</p><p><img src="http://qiniu.jxblogs.com/image-20211125224747607.png"></p><p>说明第四关采用的不同的过滤方式，查看源码：</p><pre class="line-numbers language-none"><code class="language-none">$id = '"' . $id . '"';$sql="SELECT * FROM users WHERE id=($id) LIMIT 0,1";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>发现原先的id变成了加上双引号的”id”，此时先用双引号再用小括号从里到外将其闭合，则语句变为 1”) and 1=2–+，带入源码：</p><pre class="line-numbers language-none"><code class="language-none">$sql="SELECT * FROM users WHERE id=("1") and 1=2--+") LIMIT 0,1";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://qiniu.jxblogs.com/image-20211125225345158.png"></p><p>结果成功绕过过滤</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>遇到这样的过滤语句，只有成功将提交参数闭合才能使得后面的语句成功执行，不过真实环境中我们是无法知晓网页具体的过滤方式的，只能靠一个个猜测尝试，或者代码审计来知晓他的闭合方式，所以比较麻烦。</p><h3 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h3><blockquote><p>GET、POST、COOKIE、REQUEST、HTTP头部等</p></blockquote><p>GET请求传输的数据量限制在2KB左右(所以很多文件上传或者文件下载都是通过POST去提交的)<br>        GET只要在url上，就能接收到请求，POST则显示错误<br>        REQUEST请求不管是GET和POST都可以<br>        HTTP报文头部各个参数都能注入，比如User-Agent、Cookie等</p><h4 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h4><p>GET和POST是网页中最常见的两种请求方式，我们经常可以利用其特性进行sql注入测试</p><h5 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h5><p>接下来看看两种方式有什么区别，这是一个网页的源代码</p><p> <img src="http://qiniu.jxblogs.com/image-20211125230444112.png"></p><p>意思是用get的方式将g传递给get这个变量，并且将get输出显示在页面上</p><p>此时传递参数g=123查看结果</p><p> <img src="http://qiniu.jxblogs.com/image-20211125230926563.png"></p><p>发现页面成功输出123，说明网页在使用get的方式提交数据时，通过修改url中的提交参数</p><p>是能将数据成功回显在页面上的，此时将网页源码替换为post</p><h5 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h5><p> <img src="http://qiniu.jxblogs.com/image-20211125231327606.png"></p><p>再传递参数p=123查看结果</p><p> <img src="http://qiniu.jxblogs.com/image-20211125231429901.png"></p><p>发现当请求方式为post的时候，通过url来提交参数已经行不通了</p><p>那么此时我们可以通过一些插件或者软件来代替手工修改url进行post提交</p><p> <img src="http://qiniu.jxblogs.com/image-20211125231920375.png"></p><p>此时我们将需要提交的参数放在底下的框框中，点击Execute进行提交，结果成功显示在页面上</p><h5 id="GET-amp-amp-POST"><a href="#GET-amp-amp-POST" class="headerlink" title="GET &amp;&amp; POST"></a>GET &amp;&amp; POST</h5><p> <img src="http://qiniu.jxblogs.com/image-20211125233352304.png"></p><p>此时修改网页源码，同时使用get与post两种请求方式，并使用Burpsuite截取网页数据包</p><p> <img src="http://qiniu.jxblogs.com/image-20211125233714231.png"></p><p>截取到数据包如图所示，将其转到重发器，并且同时请求g=123与p=456</p><p> <img src="http://qiniu.jxblogs.com/image-20211125233837657.png"></p><p>将其发送，查看返回结果</p><p> <img src="http://qiniu.jxblogs.com/image-20211125233943877.png"></p><p>得到结果为123456，说明当网页同时存在GET与POST两种提交方式时</p><p>GET的请求方式是要优先与POST的，优先使用GET进行传参</p><p>所以当我们进行注入测试时，<strong>需要注意请求方法是GET还是POST</strong>，有时候页面往往没有什么显示结果</p><p>那就有可能是使用POST的请求方式来提交数据的，这时候就可以利用软件或者插件来代替手工注入</p><h5 id="REQUEST"><a href="#REQUEST" class="headerlink" title="REQUEST"></a>REQUEST</h5><p> <img src="http://qiniu.jxblogs.com/image-20211125235002930.png"></p><p>此时将网页请求方式改为request，测试结果</p><p> <img src="http://qiniu.jxblogs.com/image-20211125235044681.png"></p><p> <img src="http://qiniu.jxblogs.com/image-20211125235121153.png"></p><p>结果发现当请求方式为request时无论时GET还是POST都可以接收到请求</p><h3 id="靶场演示-1"><a href="#靶场演示-1" class="headerlink" title="靶场演示"></a>靶场演示</h3><h5 id="POST数据提交注入测试"><a href="#POST数据提交注入测试" class="headerlink" title="POST数据提交注入测试"></a>POST数据提交注入测试</h5><p><strong>第十一关</strong></p><p>在输入框中输入用户名admin，密码admin  </p><p><img src="http://qiniu.jxblogs.com/image-20211125235952486.png"></p><p>发现输入的数据回显到了页面上，说明我们输入的数据被进行了一个提交</p><p>此时我们用Burpsuite进行抓包，来看看网页使用什么方式将数据提交上去的</p><p> <img src="http://qiniu.jxblogs.com/image-20211126000236275.png"></p><p>发现提交方式为POST，这种方式无法通过url来注入，既然通过POST来提交数据</p><p>那我们就可以通过修改POST的值来进行注入</p><p> <img src="http://qiniu.jxblogs.com/image-20211126000929237.png"></p><p>由于网页接收了username和password的数据，所以两个地方都可以注入，通过观察源码</p><p>发现是用单引号进行闭合的，我们闭合后进行注入尝试获取列数</p><p> <img src="http://qiniu.jxblogs.com/image-20211126001020101.png"></p><p>发现结果不是3，那么只能是2了</p><p> <img src="http://qiniu.jxblogs.com/image-20211126001142920.png"></p><p>修改后再次发送</p><p> <img src="http://qiniu.jxblogs.com/image-20211126001212668.png"></p><p>此时页面成功回显出1和2，注入成功</p><h5 id="COOKIE数据提交注入测试"><a href="#COOKIE数据提交注入测试" class="headerlink" title="COOKIE数据提交注入测试"></a>COOKIE数据提交注入测试</h5><p><strong>第二十关</strong> <img src="http://qiniu.jxblogs.com/image-20211126001817556.png"></p><p>页面输入数据进行提交，查看结果<img src="http://qiniu.jxblogs.com/image-20211126001915471.png"></p><p>可以看得出这个页面提取了COOKIE信息，COOKEI我的理解是验证用户登录的一个凭据</p><p>登录时，会在本地缓存里留下COOKIE，包括一些账户密码信息，下次登录时就无需再次输入</p><p>此时抓个包看一下</p><p> <img src="http://qiniu.jxblogs.com/image-20211126002600496.png"></p><p>发现网页通过GET的请求方式获取到了COOKIE信息，此时提交的是COOKIE里的数据</p><p>所以我们可以通过修改提交的COOKIE来进行注入</p><p> <img src="http://qiniu.jxblogs.com/image-20211126002805635.png"></p><p>通过观察源码得知使用单引号闭合，我们闭合后进行注入尝试</p><p> <img src="http://qiniu.jxblogs.com/image-20211126002848745.png"></p><p>结果成功回显，需要注意的是，有时候用–+进行注释不一定有用，可以换成#再试试</p><h5 id="HTTP头部参数数据注入测试"><a href="#HTTP头部参数数据注入测试" class="headerlink" title="HTTP头部参数数据注入测试"></a>HTTP头部参数数据注入测试</h5><p><strong>十八关</strong><img src="http://qiniu.jxblogs.com/image-20211126003809966.png"></p><p>发现接收的是浏览器的User Agent，我们同样可以在UA处进行注入，由于步骤一样，就不多演示了</p><h5 id="参数JSON数据注入测试"><a href="#参数JSON数据注入测试" class="headerlink" title="参数JSON数据注入测试"></a>参数JSON数据注入测试</h5><p>JSON 是存储和交换文本信息的语法，是轻量级的文本数据交换格式。类似xml，但JSON 比 XML 更小、更快，更易解析，在网页中抓包经常能抓到一些JSON格式的数据包</p><p> <img src="http://qiniu.jxblogs.com/image-20211126005221669.png"></p><p>类似这样的JSON格式的数据包，说明网页对这个JSON数据进行了一个接收，我们搭建一个环境测试一下</p><p> <img src="https://img2020.cnblogs.com/blog/2359469/202105/2359469-20210506214153803-4392242.png"></p><p>网页接收的JSON格式是这样的：json={“username”:”admin”}，源码中使用单引号闭合</p><p> <img src="http://qiniu.jxblogs.com/image-20211126011242553.png"></p><p>那我们提交的数据也得按照JSON的格式来，先单引号闭合，再猜测列数，最后联合查询，成功注入</p><p> <img src="http://qiniu.jxblogs.com/image-20211126011312311.png"></p><p><strong>参考博客</strong>：<a href="https://www.cnblogs.com/shley/p/14737017.html">https://www.cnblogs.com/shley/p/14737017.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="-web渗透" scheme="https://jxblogs.com/categories/web%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="web渗透" scheme="https://jxblogs.com/tags/web%E6%B8%97%E9%80%8F/"/>
    
    <category term="SQL注入" scheme="https://jxblogs.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>SQL漏洞-基础注入测试</title>
    <link href="https://jxblogs.com/posts/e8474e34.html"/>
    <id>https://jxblogs.com/posts/e8474e34.html</id>
    <published>2021-11-25T04:23:46.000Z</published>
    <updated>2021-11-26T04:40:29.259Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SQL漏洞-基础注入测试"><a href="#SQL漏洞-基础注入测试" class="headerlink" title="SQL漏洞-基础注入测试"></a>SQL漏洞-基础注入测试</h1><blockquote><p>sql注入漏洞的危害：拖库</p></blockquote><h3 id="数据库结构-以MySQL数据库为例"><a href="#数据库结构-以MySQL数据库为例" class="headerlink" title="数据库结构(以MySQL数据库为例)"></a>数据库结构(以MySQL数据库为例)</h3><pre class="line-numbers language-none"><code class="language-none">数据库A        表名            列名                    数据数据库B        表名            列名                    数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如何判断注入点"><a href="#如何判断注入点" class="headerlink" title="如何判断注入点"></a>如何判断注入点</h3><ul><li>且 and<br></li><li>或 or<br></li><li>非 not<br></li><li>异或 xor<br></li><li>真且真 = 真<br></li><li>真且假 = 假<br></li><li>真或假 = 真<br></li></ul><p>​    此时可以观察网页url，例如/?id=1或者/?s=这样带有提交信息的地方就很有可能存在注入点，通过修改提交的信息来进行sql注入测试<br></p><p>​    <strong>例如：url最后为/?id = 1 此时在后面添加and测试<br></strong></p><p>​    and 1=1  页面正常&nbsp;and 1=2   页面错误 ==表示可能存在注入点==</p><p>​    and 1=2 ==表示页面404或页面不影响,可能后台有检测，没有sql漏洞==</p><h3 id="常规注入方式"><a href="#常规注入方式" class="headerlink" title="常规注入方式"></a>常规注入方式</h3><h4 id="1-猜解列名数量"><a href="#1-猜解列名数量" class="headerlink" title="1.猜解列名数量"></a>1.猜解列名数量</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;在id=1 后面加上order by 3  如果页面正常，表示当前数据库表的列名数量为&gt;=3，如果页面错误，表示列名数量&lt;3，此时再改为order by 2，如果页面正常显示，就代表列名数量为2，就是当前表只有两列</p><h4 id="2-进行联合查询"><a href="#2-进行联合查询" class="headerlink" title="2.进行联合查询"></a>2.进行联合查询</h4><p>联合查询的意思就是在搜索当前表的信息之后，再增加一行联合查询的信息<br>        <strong>表达式：union select</strong><br>        例如sql语句为：select * from users，返回结果：</p><table><thead><tr><th align="center">id</th><th align="center">user</th><th align="center">password</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">xiaoming</td><td align="center">123</td></tr><tr><td align="center">2</td><td align="center">zhangsan</td><td align="center">abc</td></tr></tbody></table><p>此时进行联合查询：select * from users union select 1,2,3，结果为：</p><table><thead><tr><th align="center">id</th><th align="center">user</th><th align="center">password</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">xiaoming</td><td align="center">123</td></tr><tr><td align="center">2</td><td align="center">zhangsan</td><td align="center">abc</td></tr><tr><td align="center">1</td><td align="center">2</td><td align="center">3</td></tr></tbody></table><p>此时就可以将1，2，3替换为我们想要的数据，在页面回显出来</p><p><strong>例如可以替换成：</strong></p><ul><li>user()：用户名</li><li>version()：mysql版本</li><li>database()：数据库名</li><li>@@datadir：数据库路径</li><li>@@plugin_dir：插件位置</li><li>load_file：文件路径</li><li>@@basedir MYSQL：安装路径</li><li>current_user()：当前用户</li><li>system_user()：系统用户</li><li>@@version_compile_os：操作系统版本</li></ul><p>==注意：联合查询的数量必须和列名数量一致，不然会回显不出来==</p><h3 id="必懂知识点"><a href="#必懂知识点" class="headerlink" title="必懂知识点"></a>必懂知识点</h3><ul><li><p>1、mysql5.0版本以上，会自带一个数据库information_schema，里面存着所有数据名，所有表名，所有列名，这时候就可以利用这个特性，去查找相对应数据库下的表名和列名数据，其中高版本包括5.0以上，低版本5.0以下</p></li><li><p>2、数据库符号”.”，表示下一级，如 CMS.user表示CMS数据库下的user表，但是如果数据库名称带有.例如数据库名称为74cmsv3.4那么再用一个.user就失效了，因为只会解析前面那个.</p></li><li><p>3、各种语句</p><pre class="line-numbers language-none"><code class="language-none">information_schema.tables：表示记录所有数据库的所有表名的表information_schema.columns：表示记录所有数据库的所有列名的表table_name：表名column_name：列名table_schema：数据库名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注释符号：–+ , #</p></li><li><p>限制查询的结果：LIMIT语句进行控制，Limit 0,1表示 0开始显示1条数据，可以修改起始位置0改变输出结果，例如对a的查询结果为a={1,2,3,4}，进行limit限制Limit 0,1，意思是从第0个数据开始，返回1个数据，结果为a={1},Limit 1,2返回的结果就是a={2,3}</p></li><li><p>如果在数据库中select * from users union select 1,2,3 加上Limit 0,1就代表从0行起，显示1行信息</p></li><li><table><thead><tr><th align="center">id</th><th align="center">user</th><th align="center">password</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">xiaoming</td><td align="center">123</td></tr></tbody></table></li></ul><h3 id="案例实验"><a href="#案例实验" class="headerlink" title="案例实验"></a>案例实验</h3><p>环境：<a href="https://www.mozhe.cn/bug/detail/elRHc1BCd2VIckQxbjduMG9BVCtkZz09bW96aGUmozhe">墨者靶场</a><br><img src="http://qiniu.jxblogs.com/image-20211125115025302.png"></p><p>分析：此时url没发现注入点，我们进入公告页面尝试找到更多信息<br><img src="http://qiniu.jxblogs.com/image-20211125120140120.png"></p><p>发现数据提交处，尝试1=2看看页面是否正常<br><img src="http://qiniu.jxblogs.com/image-20211125123049222.png"></p><p>页面回显错误，很有可能存在注入点，第一步，猜测列名，输入order by 5，查看结果<img src="http://qiniu.jxblogs.com/image-20211125120309751.png"></p><p>页面显示空白，说明列数小于5，接着尝试order by 4</p><p>此时页面显示正常，说明列名数量为4<br></p><p>那么进行第二步联合查询，在id=1 后加上 and 1=2，1是真，1=2是假，真且假为假，此时再进行联合查询union select 1,2,3,4那么前面假的数据就不会回显而是回显后面联合查询到的数据<br><img src="http://qiniu.jxblogs.com/image-20211125120234241.png"></p><p>此时发现其中的2，3成功被回显到了页面上，那么我们就可以通过修改2，3来回显出我们想要的数据</p><p>首先获取版本信息，发现数据库版本在5.0以上可以使用内置库information_schema<br><img src="http://qiniu.jxblogs.com/image-20211125120422879.png"></p><p>那么就可以通过information_schema来获取数据库名称，将2替换为database()，成功回显出数据库名称为：    </p><p>mozhe_Discuz_StormGroup<br><img src="http://qiniu.jxblogs.com/image-20211125120509094.png"></p><p>接下来需要知道的是当前表的表名</p><pre class="line-numbers language-none"><code class="language-none">information_schema.tables：表示记录所有数据库的所有表名的表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中有一列为table_name：表名，我们此时就是要获取table_name,表达式为：</p><pre class="line-numbers language-none"><code class="language-none">union select 1,table_name,3,4 from information_schema.tables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是这样代表查询的是所有数据库的表名，所以我们还需要指定当前的数据库table_schema，此时表达式为：</p><pre class="line-numbers language-none"><code class="language-none">union select 1,table_name,3,4 from information_schema.tables where table_schema="mozhe_Discuz_StormGroup"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://qiniu.jxblogs.com/image-20211125120602758.png"></p><p>获取到当前表名为：StormGroup_member，不过大多数数据库不仅仅只有一个表，想要回显所有的表名，我们还有一条语句叫group_concat可以把所有表的信息拼接在一块</p><pre class="line-numbers language-none"><code class="language-none">group_concat(str1,str2,…)：连接一个组的所有字符串，并以逗号分割每一条数据，显示数据<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://qiniu.jxblogs.com/image-20211125120710520.png"></p><p>此时发现有这么两个表：StormGroup_member,notice，这个notice应该就是刚刚的公告了，所以这个表就忽略，我们就看StormGroup_member</p><p>知道了数据库名，表名，接下来就是获取列名了<br>        将table_name改为column_name，将记录所有表名的表information_schema.tables改为所有记录列名的表information_schema.columns<br><img src="http://qiniu.jxblogs.com/image-20211125120745210.png"></p><p>此时获取到列名有：id,name,password,status,id,title,content,time</p><p>此时可以看到关键字眼name，password，我们将这两列数据回显出来，此时表达式为：</p><pre class="line-numbers language-none"><code class="language-none">union select 1,name,password,4 from StormGroup_member<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功获取到</p><p>name：mozhe</p><p>password：356f589a7df439f6f744ff19bb8092c0<br><img src="http://qiniu.jxblogs.com/image-20211125120807510.png"></p><p>这个password与md5加密方式很像，将其进行MD5解密得到<br></p><p>密码为：dsan13<br><img src="http://qiniu.jxblogs.com/image-20211125120827742.png"></p><p>返回页面尝试登录<br><img src="http://qiniu.jxblogs.com/image-20211125120844970.png"></p><p>结果显示用户被禁用，说明得用别的用户名和密码，我们用limit 1,1来回显出表中的第二行信息，获取到第二个账户<br><img src="http://qiniu.jxblogs.com/image-20211125121238247.png"></p><p>用户名：mozhe</p><p>密码：4297c0549e4db41f6e3d29f1c7793e2c</p><p>解密后：269118</p><p>此时我们再次用密码登录系统：<br><img src="http://qiniu.jxblogs.com/image-20211125115616507.png"><br>成功进入系统后台，获取到key为：mozhef6578b1bf1f43a1c6951fd2068f</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="-web渗透" scheme="https://jxblogs.com/categories/web%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="web渗透" scheme="https://jxblogs.com/tags/web%E6%B8%97%E9%80%8F/"/>
    
    <category term="SQL注入" scheme="https://jxblogs.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>根据IP查找对应交换机端口(IP地址溯源)</title>
    <link href="https://jxblogs.com/posts/651def0f.html"/>
    <id>https://jxblogs.com/posts/651def0f.html</id>
    <published>2021-11-11T02:06:40.000Z</published>
    <updated>2021-11-12T03:17:34.221Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><blockquote><p>项目现场中需要修改某个IP终端连接的VLAN时，不知道连接的是哪台交换机哪个端口，所以需要常常需要对IP地址进行端口溯源</p></blockquote><p><strong>例如：</strong><br>需要查看IP：29.206.33.211所在交换机端口</p><h2 id="1、登录核心交换机，查看ARP表"><a href="#1、登录核心交换机，查看ARP表" class="headerlink" title="1、登录核心交换机，查看ARP表"></a>1、登录核心交换机，查看ARP表</h2><pre class="line-numbers language-none"><code class="language-none">JDS-HX-S8610E#show arp | in 29.206.33.211Internet  29.206.33.211    4  0002.0000.be2f  arpa   VLAN 206<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2、复制对应的mac地址，并查看mac地址表"><a href="#2、复制对应的mac地址，并查看mac地址表" class="headerlink" title="2、复制对应的mac地址，并查看mac地址表"></a>2、复制对应的mac地址，并查看mac地址表</h2><pre class="line-numbers language-none"><code class="language-none">JDS-HX-S8610E#show mac add 0002.0000.be2fVlan        MAC Address          Type     Interface----------  -------------------- -------- ------------------- 206        0002.0000.be2f       DYNAMIC  AggregatePort 9            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>发现此时be2f连接的口是Port9，此时在核心交换机的show run中找到port-group 9所在的接口<img src="https://i.loli.net/2021/11/11/8ndHcBgtA6D4kLO.png"></p><h2 id="3、用邻居表找到对应端口所连接的交换机"><a href="#3、用邻居表找到对应端口所连接的交换机" class="headerlink" title="3、用邻居表找到对应端口所连接的交换机"></a>3、用邻居表找到对应端口所连接的交换机</h2><pre class="line-numbers language-none"><code class="language-none">JDS-HX-S8610E#show lldp neiCapability codes:    (R) Router, (B) Bridge, (T) Telephone, (C) DOCSIS Cable Device    (W) WLAN Access Point, (P) Repeater, (S) Station, (O) OtherSystem Name                 Local Intf          Port ID                     Capability   Aging-timeErDaoMenLou-2F-S2952-01     Gi1/1/1             Gi0/51                      B, R         1minutes 37seconds YiHaoJieDuSuShe-1F-HJ-S5750 Gi1/1/2             Gi1/0/12                    B, R         1minutes 33seconds XiYiLou-4F-S2928-01         Gi1/1/4             Gi0/28                      B, R         1minutes 44seconds HuoFang-1F-S2928-01         Gi1/1/5             Gi0/27                      B, R         1minutes 58seconds BanGongLou-1F-S2928-01      Gi1/1/6             Gi0/27                      B, R         1minutes 44seconds BanGongLou-2F-S2952-01      Gi1/1/7             Gi0/52                      B, R         1minutes 51seconds BanGongLou-3F-S2952-01      Gi1/1/8             Gi0/51                      B, R         1minutes 52seconds BanGongLou-4F-S2952-01      Gi1/1/9             Gi0/52                      B, R         1minutes 59seconds BanGongLou-5F-S2928-01      Gi1/1/10            Gi0/28                      B, R         1minutes 41seconds BanGongLou-6F-S2928-01      Gi1/1/11            Gi0/27                      B, R         1minutes 31seconds ZongHeLou-2F-S2952-03       Gi1/1/12            Gi0/51                      B, R         1minutes 50seconds YiDaoMenLou-1F-S2928-01     Gi1/1/13            Gi0/28                      B, R         1minutes 36seconds XinLiZhiLiaoLou-2F-S2952-01 Gi1/1/14            Gi0/51                      B, R         1minutes 39seconds <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现Gi1/1/7所连接的交换机是BanGongLou-2F-S2952-01，它的IP地址是29.144.33.13<img src="https://i.loli.net/2021/11/11/srgYDohuC3jpBHb.png"></p><h2 id="4、telnet进去，再次show-mac-add"><a href="#4、telnet进去，再次show-mac-add" class="headerlink" title="4、telnet进去，再次show mac add"></a>4、telnet进去，再次show mac add</h2><pre class="line-numbers language-none"><code class="language-none">JDS-HX-S8610E#telnet 29.144.33.13Trying 29.144.33.13, 23...User Access VerificationPassword:***********BanGongLou-2F-S2952-01&gt;enPassword:***********BanGongLou-2F-S2952-01#show mac add 0002.0000.be2fVlan        MAC Address          Type     Interface                      Time----------  -------------------- -------- ------------------------------ -------------------- 206        0002.0000.be2f       DYNAMIC  AggregatePort 2                2020-2-14 15:34:28 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现此时be2f连接的口是Port2，并不是具体的接口，所以还需要继续往下找，此时在该交换机show run中找到port-group 2所在的接口<img src="http://qiniu.jxblogs.com/image-20211111221437422.png"></p><h2 id="5、重复以上步骤"><a href="#5、重复以上步骤" class="headerlink" title="5、重复以上步骤"></a>5、重复以上步骤</h2><pre class="line-numbers language-none"><code class="language-none">BanGongLou-2F-S2952-01#show lldp neiCapability codes:    (R) Router, (B) Bridge, (T) Telephone, (C) DOCSIS Cable Device    (W) WLAN Access Point, (P) Repeater, (S) Station, (O) OtherSystem Name                 Local Intf          Port ID                     Capability   Aging-timeUnknown                     Gi0/3               8c16.4549.cc05                           57minutes 59seconds Unknown                     Gi0/3               b025.aa27.c0ea                           58minutes 16seconds Unknown                     Gi0/3               144f.d7c8.2917                           45minutes 57seconds BanGongLou-2F-S2952-03      Gi0/47              Gi0/45                      B, R         1minutes 49seconds BanGongLou-2F-S2952-03      Gi0/48              Gi0/46                      B, R         1minutes 49seconds JDS-HX-S8610E               Gi0/51              Gi2/1/7                     B, R         1minutes 49seconds JDS-HX-S8610E               Gi0/52              Gi1/1/7                     B, R         1minutes 42seconds <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>telnet进入BanGongLou-2F-S2952-03</p><pre class="line-numbers language-none"><code class="language-none">BanGongLou-2F-S2952-03#show mac add 0002.0000.be2fVlan        MAC Address          Type     Interface                      Time----------  -------------------- -------- ------------------------------ -------------------- 206        0002.0000.be2f       DYNAMIC  AggregatePort 5                2021-8-30 15:15:27 BanGongLou-2F-S2952-03#show lldp neiCapability codes:    (R) Router, (B) Bridge, (T) Telephone, (C) DOCSIS Cable Device    (W) WLAN Access Point, (P) Repeater, (S) Station, (O) OtherSystem Name                 Local Intf          Port ID                     Capability   Aging-timeZhiHuiZhongXin              Gi0/27              Gi0/23                      B, R         1minutes 44seconds ZhiHuiZhongXin              Gi0/28              Gi0/24                      B, R         1minutes 45seconds Unknown                     Gi0/36              00d8.61e8.a421                           49minutes 45seconds Unknown                     Gi0/39              00d8.61ea.8417                           55minutes 31seconds BanGongLou-2F-S2952-01      Gi0/45              Gi0/47                      B, R         1minutes 37seconds BanGongLou-2F-S2952-01      Gi0/46              Gi0/48                      B, R         1minutes 37seconds BanGongLou-2F-S2952-02      Gi0/47              Gi0/47                      B, R         1minutes 47seconds BanGongLou-2F-S2952-02      Gi0/48              Gi0/48                      B, R         1minutes 47seconds Total entries displayed: 8BanGongLou-2F-S2952-03#BanGongLou-2F-S2952-03#telnet 29.144.33.16Trying 29.144.33.16, 23...User Access VerificationPassword:***********ZhiHuiZhongXin&gt;enPassword:***********ZhiHuiZhongXin#show mac add 0002.0000.be2fVlan        MAC Address          Type     Interface                      Time----------  -------------------- -------- ------------------------------ -------------------- 206        0002.0000.be2f       DYNAMIC  GigabitEthernet 0/5            2021-11-10 0:05:45 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后追溯至ZhiHuiZhongXin交换机上，在这台交换机上show mac<br>add找到了确定的接口，说明就是这个口了，最后所得信息如下：</p><pre class="line-numbers language-none"><code class="language-none">IP：29.206.33.211对端交换机：ZhiHuiZhongXin交换机IP： 29.144.33.16对端端口： GigabitEthernet 0/5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当需要修改vlan时，直接telnet进入交换机对应端口修改即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="网络" scheme="https://jxblogs.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="IP" scheme="https://jxblogs.com/tags/IP/"/>
    
    <category term="交换机" scheme="https://jxblogs.com/tags/%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>python常用模块熟悉</title>
    <link href="https://jxblogs.com/posts/54bcc1f6.html"/>
    <id>https://jxblogs.com/posts/54bcc1f6.html</id>
    <published>2021-11-06T15:55:55.000Z</published>
    <updated>2021-11-12T03:17:34.237Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PY常用模块"><a href="#PY常用模块" class="headerlink" title="PY常用模块"></a>PY常用模块</h1><h2 id="OS"><a href="#OS" class="headerlink" title="OS:"></a>OS:</h2><p><img src="http://qiniu.jxblogs.com/wpsF9D8.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9D9.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9DA.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9DB.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9DC.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9DD.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9DE.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9EF.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9F0.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9F1.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9F2.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9F3.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9F4.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9F5.tmp.jpg"> </p><h2 id="sys："><a href="#sys：" class="headerlink" title="sys："></a>sys：</h2><p><img src="http://qiniu.jxblogs.com/wpsFA06.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA07.tmp.jpg"> </p><h2 id="Crypto："><a href="#Crypto：" class="headerlink" title="Crypto："></a>Crypto：</h2><p><img src="http://qiniu.jxblogs.com/wpsFA08.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA18.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA19.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA1A.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA1B.tmp.jpg"> </p><h2 id="BASE64"><a href="#BASE64" class="headerlink" title="BASE64:"></a>BASE64:</h2><p><img src="http://qiniu.jxblogs.com/wpsFA2C.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA2D.tmp.jpg"> </p><h2 id="String："><a href="#String：" class="headerlink" title="String："></a>String：</h2><p><img src="http://qiniu.jxblogs.com/wpsFA2E.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA2F.tmp.jpg"> </p><h2 id="Platform："><a href="#Platform：" class="headerlink" title="Platform："></a>Platform：</h2><p><img src="http://qiniu.jxblogs.com/wpsFA30.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA40.tmp.jpg"> </p><h2 id="Time："><a href="#Time：" class="headerlink" title="Time："></a>Time：</h2><p><img src="http://qiniu.jxblogs.com/wpsFA41.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA42.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA43.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA44.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA45.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA46.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA47.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA58.tmp.jpg"> </p><h2 id="Random："><a href="#Random：" class="headerlink" title="Random："></a>Random：</h2><p><img src="http://qiniu.jxblogs.com/wpsFA59.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA5A.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA5B.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA5C.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA5D.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA5E.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA5F.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA60.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA61.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA62.tmp.jpg"> </p><h2 id="Paramiko："><a href="#Paramiko：" class="headerlink" title="Paramiko："></a>Paramiko：</h2><p>Kali：</p><p><img src="http://qiniu.jxblogs.com/wpsFA73.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA74.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA75.tmp.jpg"> </p><p>连接不上，打开kali查看22端口是否开放：</p><p><img src="http://qiniu.jxblogs.com/wpsFA76.tmp.jpg"> </p><p>发现果然没有开，先关闭kali防火墙</p><p><img src="http://qiniu.jxblogs.com/wpsFA86.tmp.jpg"> </p><p>再安装openssh</p><p><img src="http://qiniu.jxblogs.com/wpsFA87.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA88.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA89.tmp.jpg"> </p><p>再次查看，发现22端口已经开启：</p><p><img src="http://qiniu.jxblogs.com/wpsFA8A.tmp.jpg"> </p><p>再次尝试连接：成功连接</p><p><img src="http://qiniu.jxblogs.com/wpsFA8B.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA8C.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA8D.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA9E.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA9F.tmp.jpg"> </p><h2 id="SSH批量爆破："><a href="#SSH批量爆破：" class="headerlink" title="SSH批量爆破："></a>SSH批量爆破：</h2><p><img src="http://qiniu.jxblogs.com/wpsFAA0.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFAB1.tmp.jpg"> []</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="-python" scheme="https://jxblogs.com/categories/python/"/>
    
    
    <category term="python" scheme="https://jxblogs.com/tags/python/"/>
    
    <category term="SSH批量爆破" scheme="https://jxblogs.com/tags/SSH%E6%89%B9%E9%87%8F%E7%88%86%E7%A0%B4/"/>
    
  </entry>
  
</feed>
