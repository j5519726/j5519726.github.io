<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL漏洞-类型&amp;请求方法注入</title>
      <link href="/posts/fd334196.html"/>
      <url>/posts/fd334196.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SQL漏洞-类型-amp-请求方法注入"><a href="#SQL漏洞-类型-amp-请求方法注入" class="headerlink" title="SQL漏洞-类型&amp;请求方法注入"></a>SQL漏洞-类型&amp;请求方法注入</h1><blockquote><p>sql注入漏洞的危害：拖库</p></blockquote><h3 id="提交参数类型"><a href="#提交参数类型" class="headerlink" title="提交参数类型"></a>提交参数类型</h3><h4 id="1、数字类型"><a href="#1、数字类型" class="headerlink" title="1、数字类型"></a>1、数字类型</h4><p>select * from user where id=1</p><h4 id="2、字符类型"><a href="#2、字符类型" class="headerlink" title="2、字符类型"></a>2、字符类型</h4><p>select * from user where name=’xiaoming’ </p><p>当进行数据提交时，如果提交类型是字符型，则必须加单引号或双引号来进行一个闭合</p><p>而数字型可加可不加</p><h4 id="3、搜索类型"><a href="#3、搜索类型" class="headerlink" title="3、搜索类型"></a>3、搜索类型</h4><p>select * from user where name like ‘%xiaoming%’ </p><p>有时候一张表中数据很多，需要精准查找，可以使用%加引号闭合搜索，只要有xiaoming的信息都会被搜索出来</p><h4 id="4、JSON类型"><a href="#4、JSON类型" class="headerlink" title="4、JSON类型"></a>4、JSON类型</h4><p>json是post提交方式中的一种数据交互格式</p><pre class="line-numbers language-none"><code class="language-none">JSON格式：      json={"name":"xiaoming"  "age":"18"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="SQL语句干扰符号"><a href="#SQL语句干扰符号" class="headerlink" title="SQL语句干扰符号"></a>SQL语句干扰符号</h3><p>许多网站为了防止sql注入，在网页代码中加入了干扰sql语句的干扰符号。</p><p>使得sql语句被判定为某个提交参数而不会被执行，这些干扰符号包括</p><ul><li><p>1.’(单引号)</p></li><li><p>2.”(双引号)</p></li><li><p>3.%(百分号)</p></li><li><p>4.)(小括号)</p></li><li><p>5.}(大括号)<br></p></li></ul><p>等等，具体干扰方式还需要看写法</p><h3 id="靶场演示"><a href="#靶场演示" class="headerlink" title="靶场演示"></a>靶场演示</h3><p>环境：参数字符型注入测试   sqlilabs Less-1,2,3,4</p><h4 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h4><p><img src="http://qiniu.jxblogs.com/image-20211125221608634.png"></p><p>常规手段先用and 1=2查看页面结果</p><p><img src="http://qiniu.jxblogs.com/image-20211125222038036.png"></p><p>发现页面不影响，说明后台进行了拦截或者过滤，此时我们通过查看网页源代码发现，查询语句为</p><pre class="line-numbers language-none"><code class="language-none">$sql="SELECT * FROM users WHERE id='$id' LIMIT 0,1";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们将注入语句1 and 1=2带入到源码中，可得</p><pre class="line-numbers language-none"><code class="language-none">$sql="SELECT * FROM users WHERE id='1 and 1=2' LIMIT 0,1";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现此时的注入语句被当作字符类型的提交参数提交上去了，1 and 1=2只是一个参数</p><p>不会被运行，所以绕过则需要加上单引号’进行闭合，此时注入语句为1’ and 1=2</p><p>由于后面还有单引号’和LIMIT 0,1会影响到结果的输出，所以在语句末加上–+或者#将其注释，带入源码：</p><pre class="line-numbers language-none"><code class="language-none">$sql="SELECT * FROM users WHERE id='1' and 1=2--+' LIMIT 0,1";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://qiniu.jxblogs.com/image-20211125223503821.png"></p><p>闭合后，页面回显错误说明可能存在注入点，接下来就可以联合查询获取数据了</p><h4 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h4><p><img src="http://qiniu.jxblogs.com/image-20211125223917915.png"></p><p>可以看到，第三关同样进行了过滤，页面不影响，看看他的源码是怎么过滤的</p><pre class="line-numbers language-none"><code class="language-none">$sql="SELECT * FROM users WHERE id=('$id') LIMIT 0,1";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过观察语句发现，外面加了一个小括号，所以要让前面闭合，则语句变为 1’) and 1=2–+，带入源码：</p><pre class="line-numbers language-none"><code class="language-none">$sql="SELECT * FROM users WHERE id=('1') and 1=2--+') LIMIT 0,1";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://qiniu.jxblogs.com/image-20211125224523546.png"></p><p>结果成功绕过过滤</p><h4 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h4><p>用第三关的语句注入第四关，发现没了效果</p><p><img src="http://qiniu.jxblogs.com/image-20211125224747607.png"></p><p>说明第四关采用的不同的过滤方式，查看源码：</p><pre class="line-numbers language-none"><code class="language-none">$id = '"' . $id . '"';$sql="SELECT * FROM users WHERE id=($id) LIMIT 0,1";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>发现原先的id变成了加上双引号的”id”，此时先用双引号再用小括号从里到外将其闭合，则语句变为 1”) and 1=2–+，带入源码：</p><pre class="line-numbers language-none"><code class="language-none">$sql="SELECT * FROM users WHERE id=("1") and 1=2--+") LIMIT 0,1";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://qiniu.jxblogs.com/image-20211125225345158.png"></p><p>结果成功绕过过滤</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>遇到这样的过滤语句，只有成功将提交参数闭合才能使得后面的语句成功执行，不过真实环境中我们是无法知晓网页具体的过滤方式的，只能靠一个个猜测尝试，或者代码审计来知晓他的闭合方式，所以比较麻烦。</p><h3 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h3><blockquote><p>GET、POST、COOKIE、REQUEST、HTTP头部等</p></blockquote><p>GET请求传输的数据量限制在2KB左右(所以很多文件上传或者文件下载都是通过POST去提交的)<br>        GET只要在url上，就能接收到请求，POST则显示错误<br>        REQUEST请求不管是GET和POST都可以<br>        HTTP报文头部各个参数都能注入，比如User-Agent、Cookie等</p><h4 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h4><p>GET和POST是网页中最常见的两种请求方式，我们经常可以利用其特性进行sql注入测试</p><h5 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h5><p>接下来看看两种方式有什么区别，这是一个网页的源代码</p><p> <img src="http://qiniu.jxblogs.com/image-20211125230444112.png"></p><p>意思是用get的方式将g传递给get这个变量，并且将get输出显示在页面上</p><p>此时传递参数g=123查看结果</p><p> <img src="http://qiniu.jxblogs.com/image-20211125230926563.png"></p><p>发现页面成功输出123，说明网页在使用get的方式提交数据时，通过修改url中的提交参数</p><p>是能将数据成功回显在页面上的，此时将网页源码替换为post</p><h5 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h5><p> <img src="http://qiniu.jxblogs.com/image-20211125231327606.png"></p><p>再传递参数p=123查看结果</p><p> <img src="http://qiniu.jxblogs.com/image-20211125231429901.png"></p><p>发现当请求方式为post的时候，通过url来提交参数已经行不通了</p><p>那么此时我们可以通过一些插件或者软件来代替手工修改url进行post提交</p><p> <img src="http://qiniu.jxblogs.com/image-20211125231920375.png"></p><p>此时我们将需要提交的参数放在底下的框框中，点击Execute进行提交，结果成功显示在页面上</p><h5 id="GET-amp-amp-POST"><a href="#GET-amp-amp-POST" class="headerlink" title="GET &amp;&amp; POST"></a>GET &amp;&amp; POST</h5><p> <img src="http://qiniu.jxblogs.com/image-20211125233352304.png"></p><p>此时修改网页源码，同时使用get与post两种请求方式，并使用Burpsuite截取网页数据包</p><p> <img src="http://qiniu.jxblogs.com/image-20211125233714231.png"></p><p>截取到数据包如图所示，将其转到重发器，并且同时请求g=123与p=456</p><p> <img src="http://qiniu.jxblogs.com/image-20211125233837657.png"></p><p>将其发送，查看返回结果</p><p> <img src="http://qiniu.jxblogs.com/image-20211125233943877.png"></p><p>得到结果为123456，说明当网页同时存在GET与POST两种提交方式时</p><p>GET的请求方式是要优先与POST的，优先使用GET进行传参</p><p>所以当我们进行注入测试时，<strong>需要注意请求方法是GET还是POST</strong>，有时候页面往往没有什么显示结果</p><p>那就有可能是使用POST的请求方式来提交数据的，这时候就可以利用软件或者插件来代替手工注入</p><h5 id="REQUEST"><a href="#REQUEST" class="headerlink" title="REQUEST"></a>REQUEST</h5><p> <img src="http://qiniu.jxblogs.com/image-20211125235002930.png"></p><p>此时将网页请求方式改为request，测试结果</p><p> <img src="http://qiniu.jxblogs.com/image-20211125235044681.png"></p><p> <img src="http://qiniu.jxblogs.com/image-20211125235121153.png"></p><p>结果发现当请求方式为request时无论时GET还是POST都可以接收到请求</p><h3 id="靶场演示-1"><a href="#靶场演示-1" class="headerlink" title="靶场演示"></a>靶场演示</h3><h5 id="POST数据提交注入测试"><a href="#POST数据提交注入测试" class="headerlink" title="POST数据提交注入测试"></a>POST数据提交注入测试</h5><p><strong>第十一关</strong></p><p>在输入框中输入用户名admin，密码admin  </p><p><img src="http://qiniu.jxblogs.com/image-20211125235952486.png"></p><p>发现输入的数据回显到了页面上，说明我们输入的数据被进行了一个提交</p><p>此时我们用Burpsuite进行抓包，来看看网页使用什么方式将数据提交上去的</p><p> <img src="http://qiniu.jxblogs.com/image-20211126000236275.png"></p><p>发现提交方式为POST，这种方式无法通过url来注入，既然通过POST来提交数据</p><p>那我们就可以通过修改POST的值来进行注入</p><p> <img src="http://qiniu.jxblogs.com/image-20211126000929237.png"></p><p>由于网页接收了username和password的数据，所以两个地方都可以注入，通过观察源码</p><p>发现是用单引号进行闭合的，我们闭合后进行注入尝试获取列数</p><p> <img src="http://qiniu.jxblogs.com/image-20211126001020101.png"></p><p>发现结果不是3，那么只能是2了</p><p> <img src="http://qiniu.jxblogs.com/image-20211126001142920.png"></p><p>修改后再次发送</p><p> <img src="http://qiniu.jxblogs.com/image-20211126001212668.png"></p><p>此时页面成功回显出1和2，注入成功</p><h5 id="COOKIE数据提交注入测试"><a href="#COOKIE数据提交注入测试" class="headerlink" title="COOKIE数据提交注入测试"></a>COOKIE数据提交注入测试</h5><p><strong>第二十关</strong> <img src="http://qiniu.jxblogs.com/image-20211126001817556.png"></p><p>页面输入数据进行提交，查看结果<img src="http://qiniu.jxblogs.com/image-20211126001915471.png"></p><p>可以看得出这个页面提取了COOKIE信息，COOKEI我的理解是验证用户登录的一个凭据</p><p>登录时，会在本地缓存里留下COOKIE，包括一些账户密码信息，下次登录时就无需再次输入</p><p>此时抓个包看一下</p><p> <img src="http://qiniu.jxblogs.com/image-20211126002600496.png"></p><p>发现网页通过GET的请求方式获取到了COOKIE信息，此时提交的是COOKIE里的数据</p><p>所以我们可以通过修改提交的COOKIE来进行注入</p><p> <img src="http://qiniu.jxblogs.com/image-20211126002805635.png"></p><p>通过观察源码得知使用单引号闭合，我们闭合后进行注入尝试</p><p> <img src="http://qiniu.jxblogs.com/image-20211126002848745.png"></p><p>结果成功回显，需要注意的是，有时候用–+进行注释不一定有用，可以换成#再试试</p><h5 id="HTTP头部参数数据注入测试"><a href="#HTTP头部参数数据注入测试" class="headerlink" title="HTTP头部参数数据注入测试"></a>HTTP头部参数数据注入测试</h5><p><strong>十八关</strong><img src="http://qiniu.jxblogs.com/image-20211126003809966.png"></p><p>发现接收的是浏览器的User Agent，我们同样可以在UA处进行注入，由于步骤一样，就不多演示了</p><h5 id="参数JSON数据注入测试"><a href="#参数JSON数据注入测试" class="headerlink" title="参数JSON数据注入测试"></a>参数JSON数据注入测试</h5><p>JSON 是存储和交换文本信息的语法，是轻量级的文本数据交换格式。类似xml，但JSON 比 XML 更小、更快，更易解析，在网页中抓包经常能抓到一些JSON格式的数据包</p><p> <img src="http://qiniu.jxblogs.com/image-20211126005221669.png"></p><p>类似这样的JSON格式的数据包，说明网页对这个JSON数据进行了一个接收，我们搭建一个环境测试一下</p><p> <img src="https://img2020.cnblogs.com/blog/2359469/202105/2359469-20210506214153803-4392242.png"></p><p>网页接收的JSON格式是这样的：json={“username”:”admin”}，源码中使用单引号闭合</p><p> <img src="http://qiniu.jxblogs.com/image-20211126011242553.png"></p><p>那我们提交的数据也得按照JSON的格式来，先单引号闭合，再猜测列数，最后联合查询，成功注入</p><p> <img src="http://qiniu.jxblogs.com/image-20211126011312311.png"></p><p><strong>参考博客</strong>：<a href="https://www.cnblogs.com/shley/p/14737017.html">https://www.cnblogs.com/shley/p/14737017.html</a></p>]]></content>
      
      
      <categories>
          
          <category> -web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL漏洞-基础注入测试</title>
      <link href="/posts/e8474e34.html"/>
      <url>/posts/e8474e34.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SQL漏洞-基础注入测试"><a href="#SQL漏洞-基础注入测试" class="headerlink" title="SQL漏洞-基础注入测试"></a>SQL漏洞-基础注入测试</h1><blockquote><p>sql注入漏洞的危害：拖库</p></blockquote><h3 id="数据库结构-以MySQL数据库为例"><a href="#数据库结构-以MySQL数据库为例" class="headerlink" title="数据库结构(以MySQL数据库为例)"></a>数据库结构(以MySQL数据库为例)</h3><pre class="line-numbers language-none"><code class="language-none">数据库A        表名            列名                    数据数据库B        表名            列名                    数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如何判断注入点"><a href="#如何判断注入点" class="headerlink" title="如何判断注入点"></a>如何判断注入点</h3><ul><li>且 and<br></li><li>或 or<br></li><li>非 not<br></li><li>异或 xor<br></li><li>真且真 = 真<br></li><li>真且假 = 假<br></li><li>真或假 = 真<br></li></ul><p>​    此时可以观察网页url，例如/?id=1或者/?s=这样带有提交信息的地方就很有可能存在注入点，通过修改提交的信息来进行sql注入测试<br></p><p>​    <strong>例如：url最后为/?id = 1 此时在后面添加and测试<br></strong></p><p>​    and 1=1  页面正常&nbsp;and 1=2   页面错误 ==表示可能存在注入点==</p><p>​    and 1=2 ==表示页面404或页面不影响,可能后台有检测，没有sql漏洞==</p><h3 id="常规注入方式"><a href="#常规注入方式" class="headerlink" title="常规注入方式"></a>常规注入方式</h3><h4 id="1-猜解列名数量"><a href="#1-猜解列名数量" class="headerlink" title="1.猜解列名数量"></a>1.猜解列名数量</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;在id=1 后面加上order by 3  如果页面正常，表示当前数据库表的列名数量为&gt;=3，如果页面错误，表示列名数量&lt;3，此时再改为order by 2，如果页面正常显示，就代表列名数量为2，就是当前表只有两列</p><h4 id="2-进行联合查询"><a href="#2-进行联合查询" class="headerlink" title="2.进行联合查询"></a>2.进行联合查询</h4><p>联合查询的意思就是在搜索当前表的信息之后，再增加一行联合查询的信息<br>        <strong>表达式：union select</strong><br>        例如sql语句为：select * from users，返回结果：</p><table><thead><tr><th align="center">id</th><th align="center">user</th><th align="center">password</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">xiaoming</td><td align="center">123</td></tr><tr><td align="center">2</td><td align="center">zhangsan</td><td align="center">abc</td></tr></tbody></table><p>此时进行联合查询：select * from users union select 1,2,3，结果为：</p><table><thead><tr><th align="center">id</th><th align="center">user</th><th align="center">password</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">xiaoming</td><td align="center">123</td></tr><tr><td align="center">2</td><td align="center">zhangsan</td><td align="center">abc</td></tr><tr><td align="center">1</td><td align="center">2</td><td align="center">3</td></tr></tbody></table><p>此时就可以将1，2，3替换为我们想要的数据，在页面回显出来</p><p><strong>例如可以替换成：</strong></p><ul><li>user()：用户名</li><li>version()：mysql版本</li><li>database()：数据库名</li><li>@@datadir：数据库路径</li><li>@@plugin_dir：插件位置</li><li>load_file：文件路径</li><li>@@basedir MYSQL：安装路径</li><li>current_user()：当前用户</li><li>system_user()：系统用户</li><li>@@version_compile_os：操作系统版本</li></ul><p>==注意：联合查询的数量必须和列名数量一致，不然会回显不出来==</p><h3 id="必懂知识点"><a href="#必懂知识点" class="headerlink" title="必懂知识点"></a>必懂知识点</h3><ul><li><p>1、mysql5.0版本以上，会自带一个数据库information_schema，里面存着所有数据名，所有表名，所有列名，这时候就可以利用这个特性，去查找相对应数据库下的表名和列名数据，其中高版本包括5.0以上，低版本5.0以下</p></li><li><p>2、数据库符号”.”，表示下一级，如 CMS.user表示CMS数据库下的user表，但是如果数据库名称带有.例如数据库名称为74cmsv3.4那么再用一个.user就失效了，因为只会解析前面那个.</p></li><li><p>3、各种语句</p><pre class="line-numbers language-none"><code class="language-none">information_schema.tables：表示记录所有数据库的所有表名的表information_schema.columns：表示记录所有数据库的所有列名的表table_name：表名column_name：列名table_schema：数据库名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注释符号：–+ , #</p></li><li><p>限制查询的结果：LIMIT语句进行控制，Limit 0,1表示 0开始显示1条数据，可以修改起始位置0改变输出结果，例如对a的查询结果为a={1,2,3,4}，进行limit限制Limit 0,1，意思是从第0个数据开始，返回1个数据，结果为a={1},Limit 1,2返回的结果就是a={2,3}</p></li><li><p>如果在数据库中select * from users union select 1,2,3 加上Limit 0,1就代表从0行起，显示1行信息</p></li><li><table><thead><tr><th align="center">id</th><th align="center">user</th><th align="center">password</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">xiaoming</td><td align="center">123</td></tr></tbody></table></li></ul><h3 id="案例实验"><a href="#案例实验" class="headerlink" title="案例实验"></a>案例实验</h3><p>环境：<a href="https://www.mozhe.cn/bug/detail/elRHc1BCd2VIckQxbjduMG9BVCtkZz09bW96aGUmozhe">墨者靶场</a><br><img src="http://qiniu.jxblogs.com/image-20211125115025302.png"></p><p>分析：此时url没发现注入点，我们进入公告页面尝试找到更多信息<br><img src="http://qiniu.jxblogs.com/image-20211125120140120.png"></p><p>发现数据提交处，尝试1=2看看页面是否正常<br><img src="http://qiniu.jxblogs.com/image-20211125123049222.png"></p><p>页面回显错误，很有可能存在注入点，第一步，猜测列名，输入order by 5，查看结果<img src="http://qiniu.jxblogs.com/image-20211125120309751.png"></p><p>页面显示空白，说明列数小于5，接着尝试order by 4</p><p>此时页面显示正常，说明列名数量为4<br></p><p>那么进行第二步联合查询，在id=1 后加上 and 1=2，1是真，1=2是假，真且假为假，此时再进行联合查询union select 1,2,3,4那么前面假的数据就不会回显而是回显后面联合查询到的数据<br><img src="http://qiniu.jxblogs.com/image-20211125120234241.png"></p><p>此时发现其中的2，3成功被回显到了页面上，那么我们就可以通过修改2，3来回显出我们想要的数据</p><p>首先获取版本信息，发现数据库版本在5.0以上可以使用内置库information_schema<br><img src="http://qiniu.jxblogs.com/image-20211125120422879.png"></p><p>那么就可以通过information_schema来获取数据库名称，将2替换为database()，成功回显出数据库名称为：    </p><p>mozhe_Discuz_StormGroup<br><img src="http://qiniu.jxblogs.com/image-20211125120509094.png"></p><p>接下来需要知道的是当前表的表名</p><pre class="line-numbers language-none"><code class="language-none">information_schema.tables：表示记录所有数据库的所有表名的表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中有一列为table_name：表名，我们此时就是要获取table_name,表达式为：</p><pre class="line-numbers language-none"><code class="language-none">union select 1,table_name,3,4 from information_schema.tables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是这样代表查询的是所有数据库的表名，所以我们还需要指定当前的数据库table_schema，此时表达式为：</p><pre class="line-numbers language-none"><code class="language-none">union select 1,table_name,3,4 from information_schema.tables where table_schema="mozhe_Discuz_StormGroup"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://qiniu.jxblogs.com/image-20211125120602758.png"></p><p>获取到当前表名为：StormGroup_member，不过大多数数据库不仅仅只有一个表，想要回显所有的表名，我们还有一条语句叫group_concat可以把所有表的信息拼接在一块</p><pre class="line-numbers language-none"><code class="language-none">group_concat(str1,str2,…)：连接一个组的所有字符串，并以逗号分割每一条数据，显示数据<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://qiniu.jxblogs.com/image-20211125120710520.png"></p><p>此时发现有这么两个表：StormGroup_member,notice，这个notice应该就是刚刚的公告了，所以这个表就忽略，我们就看StormGroup_member</p><p>知道了数据库名，表名，接下来就是获取列名了<br>        将table_name改为column_name，将记录所有表名的表information_schema.tables改为所有记录列名的表information_schema.columns<br><img src="http://qiniu.jxblogs.com/image-20211125120745210.png"></p><p>此时获取到列名有：id,name,password,status,id,title,content,time</p><p>此时可以看到关键字眼name，password，我们将这两列数据回显出来，此时表达式为：</p><pre class="line-numbers language-none"><code class="language-none">union select 1,name,password,4 from StormGroup_member<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功获取到</p><p>name：mozhe</p><p>password：356f589a7df439f6f744ff19bb8092c0<br><img src="http://qiniu.jxblogs.com/image-20211125120807510.png"></p><p>这个password与md5加密方式很像，将其进行MD5解密得到<br></p><p>密码为：dsan13<br><img src="http://qiniu.jxblogs.com/image-20211125120827742.png"></p><p>返回页面尝试登录<br><img src="http://qiniu.jxblogs.com/image-20211125120844970.png"></p><p>结果显示用户被禁用，说明得用别的用户名和密码，我们用limit 1,1来回显出表中的第二行信息，获取到第二个账户<br><img src="http://qiniu.jxblogs.com/image-20211125121238247.png"></p><p>用户名：mozhe</p><p>密码：4297c0549e4db41f6e3d29f1c7793e2c</p><p>解密后：269118</p><p>此时我们再次用密码登录系统：<br><img src="http://qiniu.jxblogs.com/image-20211125115616507.png"><br>成功进入系统后台，获取到key为：mozhef6578b1bf1f43a1c6951fd2068f</p>]]></content>
      
      
      <categories>
          
          <category> -web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据IP查找对应交换机端口(IP地址溯源)</title>
      <link href="/posts/651def0f.html"/>
      <url>/posts/651def0f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><blockquote><p>项目现场中需要修改某个IP终端连接的VLAN时，不知道连接的是哪台交换机哪个端口，所以需要常常需要对IP地址进行端口溯源</p></blockquote><p><strong>例如：</strong><br>需要查看IP：29.206.33.211所在交换机端口</p><h2 id="1、登录核心交换机，查看ARP表"><a href="#1、登录核心交换机，查看ARP表" class="headerlink" title="1、登录核心交换机，查看ARP表"></a>1、登录核心交换机，查看ARP表</h2><pre class="line-numbers language-none"><code class="language-none">JDS-HX-S8610E#show arp | in 29.206.33.211Internet  29.206.33.211    4  0002.0000.be2f  arpa   VLAN 206<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2、复制对应的mac地址，并查看mac地址表"><a href="#2、复制对应的mac地址，并查看mac地址表" class="headerlink" title="2、复制对应的mac地址，并查看mac地址表"></a>2、复制对应的mac地址，并查看mac地址表</h2><pre class="line-numbers language-none"><code class="language-none">JDS-HX-S8610E#show mac add 0002.0000.be2fVlan        MAC Address          Type     Interface----------  -------------------- -------- ------------------- 206        0002.0000.be2f       DYNAMIC  AggregatePort 9            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>发现此时be2f连接的口是Port9，此时在核心交换机的show run中找到port-group 9所在的接口<img src="https://i.loli.net/2021/11/11/8ndHcBgtA6D4kLO.png"></p><h2 id="3、用邻居表找到对应端口所连接的交换机"><a href="#3、用邻居表找到对应端口所连接的交换机" class="headerlink" title="3、用邻居表找到对应端口所连接的交换机"></a>3、用邻居表找到对应端口所连接的交换机</h2><pre class="line-numbers language-none"><code class="language-none">JDS-HX-S8610E#show lldp neiCapability codes:    (R) Router, (B) Bridge, (T) Telephone, (C) DOCSIS Cable Device    (W) WLAN Access Point, (P) Repeater, (S) Station, (O) OtherSystem Name                 Local Intf          Port ID                     Capability   Aging-timeErDaoMenLou-2F-S2952-01     Gi1/1/1             Gi0/51                      B, R         1minutes 37seconds YiHaoJieDuSuShe-1F-HJ-S5750 Gi1/1/2             Gi1/0/12                    B, R         1minutes 33seconds XiYiLou-4F-S2928-01         Gi1/1/4             Gi0/28                      B, R         1minutes 44seconds HuoFang-1F-S2928-01         Gi1/1/5             Gi0/27                      B, R         1minutes 58seconds BanGongLou-1F-S2928-01      Gi1/1/6             Gi0/27                      B, R         1minutes 44seconds BanGongLou-2F-S2952-01      Gi1/1/7             Gi0/52                      B, R         1minutes 51seconds BanGongLou-3F-S2952-01      Gi1/1/8             Gi0/51                      B, R         1minutes 52seconds BanGongLou-4F-S2952-01      Gi1/1/9             Gi0/52                      B, R         1minutes 59seconds BanGongLou-5F-S2928-01      Gi1/1/10            Gi0/28                      B, R         1minutes 41seconds BanGongLou-6F-S2928-01      Gi1/1/11            Gi0/27                      B, R         1minutes 31seconds ZongHeLou-2F-S2952-03       Gi1/1/12            Gi0/51                      B, R         1minutes 50seconds YiDaoMenLou-1F-S2928-01     Gi1/1/13            Gi0/28                      B, R         1minutes 36seconds XinLiZhiLiaoLou-2F-S2952-01 Gi1/1/14            Gi0/51                      B, R         1minutes 39seconds <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现Gi1/1/7所连接的交换机是BanGongLou-2F-S2952-01，它的IP地址是29.144.33.13<img src="https://i.loli.net/2021/11/11/srgYDohuC3jpBHb.png"></p><h2 id="4、telnet进去，再次show-mac-add"><a href="#4、telnet进去，再次show-mac-add" class="headerlink" title="4、telnet进去，再次show mac add"></a>4、telnet进去，再次show mac add</h2><pre class="line-numbers language-none"><code class="language-none">JDS-HX-S8610E#telnet 29.144.33.13Trying 29.144.33.13, 23...User Access VerificationPassword:***********BanGongLou-2F-S2952-01&gt;enPassword:***********BanGongLou-2F-S2952-01#show mac add 0002.0000.be2fVlan        MAC Address          Type     Interface                      Time----------  -------------------- -------- ------------------------------ -------------------- 206        0002.0000.be2f       DYNAMIC  AggregatePort 2                2020-2-14 15:34:28 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现此时be2f连接的口是Port2，并不是具体的接口，所以还需要继续往下找，此时在该交换机show run中找到port-group 2所在的接口<img src="http://qiniu.jxblogs.com/image-20211111221437422.png"></p><h2 id="5、重复以上步骤"><a href="#5、重复以上步骤" class="headerlink" title="5、重复以上步骤"></a>5、重复以上步骤</h2><pre class="line-numbers language-none"><code class="language-none">BanGongLou-2F-S2952-01#show lldp neiCapability codes:    (R) Router, (B) Bridge, (T) Telephone, (C) DOCSIS Cable Device    (W) WLAN Access Point, (P) Repeater, (S) Station, (O) OtherSystem Name                 Local Intf          Port ID                     Capability   Aging-timeUnknown                     Gi0/3               8c16.4549.cc05                           57minutes 59seconds Unknown                     Gi0/3               b025.aa27.c0ea                           58minutes 16seconds Unknown                     Gi0/3               144f.d7c8.2917                           45minutes 57seconds BanGongLou-2F-S2952-03      Gi0/47              Gi0/45                      B, R         1minutes 49seconds BanGongLou-2F-S2952-03      Gi0/48              Gi0/46                      B, R         1minutes 49seconds JDS-HX-S8610E               Gi0/51              Gi2/1/7                     B, R         1minutes 49seconds JDS-HX-S8610E               Gi0/52              Gi1/1/7                     B, R         1minutes 42seconds <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>telnet进入BanGongLou-2F-S2952-03</p><pre class="line-numbers language-none"><code class="language-none">BanGongLou-2F-S2952-03#show mac add 0002.0000.be2fVlan        MAC Address          Type     Interface                      Time----------  -------------------- -------- ------------------------------ -------------------- 206        0002.0000.be2f       DYNAMIC  AggregatePort 5                2021-8-30 15:15:27 BanGongLou-2F-S2952-03#show lldp neiCapability codes:    (R) Router, (B) Bridge, (T) Telephone, (C) DOCSIS Cable Device    (W) WLAN Access Point, (P) Repeater, (S) Station, (O) OtherSystem Name                 Local Intf          Port ID                     Capability   Aging-timeZhiHuiZhongXin              Gi0/27              Gi0/23                      B, R         1minutes 44seconds ZhiHuiZhongXin              Gi0/28              Gi0/24                      B, R         1minutes 45seconds Unknown                     Gi0/36              00d8.61e8.a421                           49minutes 45seconds Unknown                     Gi0/39              00d8.61ea.8417                           55minutes 31seconds BanGongLou-2F-S2952-01      Gi0/45              Gi0/47                      B, R         1minutes 37seconds BanGongLou-2F-S2952-01      Gi0/46              Gi0/48                      B, R         1minutes 37seconds BanGongLou-2F-S2952-02      Gi0/47              Gi0/47                      B, R         1minutes 47seconds BanGongLou-2F-S2952-02      Gi0/48              Gi0/48                      B, R         1minutes 47seconds Total entries displayed: 8BanGongLou-2F-S2952-03#BanGongLou-2F-S2952-03#telnet 29.144.33.16Trying 29.144.33.16, 23...User Access VerificationPassword:***********ZhiHuiZhongXin&gt;enPassword:***********ZhiHuiZhongXin#show mac add 0002.0000.be2fVlan        MAC Address          Type     Interface                      Time----------  -------------------- -------- ------------------------------ -------------------- 206        0002.0000.be2f       DYNAMIC  GigabitEthernet 0/5            2021-11-10 0:05:45 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后追溯至ZhiHuiZhongXin交换机上，在这台交换机上show mac<br>add找到了确定的接口，说明就是这个口了，最后所得信息如下：</p><pre class="line-numbers language-none"><code class="language-none">IP：29.206.33.211对端交换机：ZhiHuiZhongXin交换机IP： 29.144.33.16对端端口： GigabitEthernet 0/5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当需要修改vlan时，直接telnet进入交换机对应端口修改即可</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IP </tag>
            
            <tag> 交换机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python常用模块熟悉</title>
      <link href="/posts/54bcc1f6.html"/>
      <url>/posts/54bcc1f6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PY常用模块"><a href="#PY常用模块" class="headerlink" title="PY常用模块"></a>PY常用模块</h1><h2 id="OS"><a href="#OS" class="headerlink" title="OS:"></a>OS:</h2><p><img src="http://qiniu.jxblogs.com/wpsF9D8.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9D9.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9DA.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9DB.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9DC.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9DD.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9DE.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9EF.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9F0.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9F1.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9F2.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9F3.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9F4.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsF9F5.tmp.jpg"> </p><h2 id="sys："><a href="#sys：" class="headerlink" title="sys："></a>sys：</h2><p><img src="http://qiniu.jxblogs.com/wpsFA06.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA07.tmp.jpg"> </p><h2 id="Crypto："><a href="#Crypto：" class="headerlink" title="Crypto："></a>Crypto：</h2><p><img src="http://qiniu.jxblogs.com/wpsFA08.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA18.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA19.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA1A.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA1B.tmp.jpg"> </p><h2 id="BASE64"><a href="#BASE64" class="headerlink" title="BASE64:"></a>BASE64:</h2><p><img src="http://qiniu.jxblogs.com/wpsFA2C.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA2D.tmp.jpg"> </p><h2 id="String："><a href="#String：" class="headerlink" title="String："></a>String：</h2><p><img src="http://qiniu.jxblogs.com/wpsFA2E.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA2F.tmp.jpg"> </p><h2 id="Platform："><a href="#Platform：" class="headerlink" title="Platform："></a>Platform：</h2><p><img src="http://qiniu.jxblogs.com/wpsFA30.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA40.tmp.jpg"> </p><h2 id="Time："><a href="#Time：" class="headerlink" title="Time："></a>Time：</h2><p><img src="http://qiniu.jxblogs.com/wpsFA41.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA42.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA43.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA44.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA45.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA46.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA47.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA58.tmp.jpg"> </p><h2 id="Random："><a href="#Random：" class="headerlink" title="Random："></a>Random：</h2><p><img src="http://qiniu.jxblogs.com/wpsFA59.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA5A.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA5B.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA5C.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA5D.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA5E.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA5F.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA60.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA61.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA62.tmp.jpg"> </p><h2 id="Paramiko："><a href="#Paramiko：" class="headerlink" title="Paramiko："></a>Paramiko：</h2><p>Kali：</p><p><img src="http://qiniu.jxblogs.com/wpsFA73.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA74.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA75.tmp.jpg"> </p><p>连接不上，打开kali查看22端口是否开放：</p><p><img src="http://qiniu.jxblogs.com/wpsFA76.tmp.jpg"> </p><p>发现果然没有开，先关闭kali防火墙</p><p><img src="http://qiniu.jxblogs.com/wpsFA86.tmp.jpg"> </p><p>再安装openssh</p><p><img src="http://qiniu.jxblogs.com/wpsFA87.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA88.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA89.tmp.jpg"> </p><p>再次查看，发现22端口已经开启：</p><p><img src="http://qiniu.jxblogs.com/wpsFA8A.tmp.jpg"> </p><p>再次尝试连接：成功连接</p><p><img src="http://qiniu.jxblogs.com/wpsFA8B.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA8C.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA8D.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA9E.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFA9F.tmp.jpg"> </p><h2 id="SSH批量爆破："><a href="#SSH批量爆破：" class="headerlink" title="SSH批量爆破："></a>SSH批量爆破：</h2><p><img src="http://qiniu.jxblogs.com/wpsFAA0.tmp.jpg"> </p><p><img src="http://qiniu.jxblogs.com/wpsFAB1.tmp.jpg"> []</p>]]></content>
      
      
      <categories>
          
          <category> -python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> SSH批量爆破 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
